10/4/2018
Downloaded jenkins on windows
Started jenkins using command prompt and done with the following command to extract the .war file (java -jar jenkins.war). 
Accessed jenkins through the link −> http://localhost:8080
Jenkins dashboard is opened by providing user name and password
Exploring jenkins dashboard/console
Changed the port from 8080 to 8088 using the command java -jar jenkins.war --httpPort=8088 and accessed jenkins through http://localhost:8088
Troubleshooting the issue regarding plugins as default plugins are not available in the dashboard.

11/4/2018
Working with the scenario: Compiling and running a java file in jenkins on Windows i.e., by integrating Jenkins and GitHub (with the GitHub Jenkins Plugin)
Exploring GitHub repository
Created an account in github -> https://github.com/ and created a new repository
Uploaded some files into repository by browsing the fil path and committed the changes.
Checked the files present in the particular repo whether they are committed or not.
Modified files which are already uploaded in the repo and again committed
Deleted files in the repository by selecting particular file to be deleted and again committed
I have pushed the code into the git repository and committed the changes required, debugging the plugins issue in jenkins and doing documentation parallely.

12/4/2018
Done with a scenario Git Plugin setup in Jenkins
Downloaded the latest Git.exe file for Windows and Installed 
Aaccessing git from windows command prompt without using Github server
Got to know about Git advantages
Working with git commands which are used to set a git repository

13/4/2018
Working with the scenario integrating jenkins and github i.e., Compiling and running a java file in jenkins on Windows
Successfully pushed the code into git repository
But unable to push code from git repository to the jenkins because of the following issue.
  Error occurred due to "SSL certificate problem: self signed certificate in certificate chain"
To check the issue, I have cloned files from the repository to local environment. But again faced the same issue.
Unable to access git, so troubleshooting the above issue.

16/4/2018
Done with the scenario:
Integrating jenkins and github via github plugin; i.e., Compiling and running a java application in jenkins on Windows
Created a job in jenkins
Configured the job with respective details:
 Gave Project details and GitHub url (as my repository is hosted from github)
 Selected Source Code Management (SCM) as Git and provided the respective url
 Next pushed the code; now coming to Build section, opted for add build step 
 Gave the commands required for compiling and running the application by selecting the option Execute Windows batch command.
 Saved and Build the job successfully; Now build history is seen by clicking #1 
 Output is viewed in console output section once job is build successfully.
 
17/4/2018
Doing research and development on pull request and merge request,
Attended KT session on NOC (Network Operations Center) and Nagios,
Done with the issue "SSL certificate problem: self signed certificate in certificate chain",
Tested Jenkins by picking up an appilcation from git repositroy to integrate,
Troubleshooting the issue: Class names, are only accepted if annotation processing is explicitly requested.

18/4/2018
Done with the issue "Class names, are only accepted if annotation processing is explicitly requested",
Tested the scenario again in Jenkins by picking up an appilcation from git repositroy to integrate - worked fine,
Done documnetation on the scenarios: Jenkins - Git Setup & Integrating Jenkins - GitHub
Attended KT session on disk alerts and application alerts
Getting to know about Network Operations Center, its design and managing NOC

19/4/2018
Got to know about 
Booting process in linux
Steps involved in the booting process
Commands to Monitor Swap Space Usage in Linux
Usage of nice and renice commands
Exploring the git gui 
Doing r&d on git on windows

20/4/2018
Attended a meeting on an effective communication,
Got to know about logrotate,
Doing r&d on git extension on windows,
Working with the scenario Jenkins Tomcat setup,
Troubleshooting the issue "FAIL - Application at context path [/jenkins] could not be started".
 
23/4/2018
Done with the issue "FAIL - Application at context path [/jenkins] could not be started",
Configured the following in tomcat web application manager to deploy jenkins.war file,
Context Path 	
XML Configuration file URL	
WAR or Directory URL
Successfully deployed jenkins.war in the tomcat,
Troubleshooting the issue "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists" while accessing the jenkins.

24/4/2018
I have been monitoring mails,
Started the jenkins application from tomcat, message is displayed as "OK - Started application at context path [/jenkins]",
Tried to access jenkins through http://localhost:8080/jenkins/ but facing the issue "HTTP Status 404 – Not Found",
Troubleshooting the above issue,
Meanwhile trying to deploy jenkins.war directly by uploading WAR file without configuring, but unable to do so because the connection to the server was reset while the page was loading.

25/4/2018
Checked the opened ports on the system by using netstat command and its options,
And changed the tomcat port as jenkins and tomcat are running on the same port; some port conflicts occurred,
Stopped the tomcat server
Opened Tomcat_Home/conf/server.xml file to edit 
Looked for the port *8080* in the xml file and replaced with the other available port.
<Connector port="8080" protocol="HTTP/1.1" 
connectionTimeout="20000" 
redirectPort="8443" />
Wrote playbook for deploying jenkins.war in the tomcat,
Successfully deployed jenkins.war in the tomcat,

26/4/2018
Working with the scenario jenkins tomcat setup,
Modifying the playbook jenkins.war,
Working with the ansible modules that enables the port 8080 such that jenkins would run on that port,
Troubleshooting the issues:
Encountered exception [javax.management.RuntimeOperationsException: Exception invoking method check],
403 Access Denied - You are not authorized to view this page
By default the Manager is only accessible from a browser running on the same machine as Tomcat. If you wish to modify this restriction, you'll need to edit the Manager's context.xml file. 

27/4/2018
Done with the scenario jenkins tomcat setup on windows,
Installed tomcat on windows,
Changed the default port of tomcat server in conf/tomcat-users.xml,
Downloaded jenkins.war,
Placed the jenkins.war file in webapps folder,
And successfully deployed jenkins.war application in tomcat web application manager,
Accessed the jenkins application from the tomcat,
Working with the documentation for the scenario jenkins-tomcat setup.

2/5/2018
Done with the documentation jenkins-tomcat setup,
Done with the scenario, jenkins picks up a java application from local system which is placed in the jenkins workplace an then a job is build,
Done document on the above scenario,
Attended KT session on 
LDAP servers,Active Directory,User creation in Physical box and VM.

3/5/2018
Went through the LDAP and AD also Git tutorial sessions,
Installed git on windows and accessed it from git bash,
After building the project (integrating Jenkins and Git) received the above error on the console output section,
" ERROR: Error cloning remote repo 'origin' "
Troubleshooted above issue by performing the below steps:
1. Go to Manage Jenkins  >  Global Tool Configurations 
2. Under Git configuration  >  Git installations 
3. Enter complete path to git executable including git.exe  > Save  > Again build the project
Done with the job jenkins and github integration and built it in other way through global tool configuration.

4/5/2018
Went through the jenkins beginner tutorial regarding:
Scheduling cron jobs in jenkins and 
About the build trigger configuration with options build periodically and Poll SCM ,
Done with a scenario Jenkins integration with GIT - SCM successfully,
Configured Poll SCM in build triggers by scheduling cron job,
Working with the documentation.

7/5/2018
Done with the documentation on the scenario - Jenkins integration with GIT - SCM,
Done with a scenario - scheduling a job in jenkins by using the option build periodically in build trigger section,
Scheduled job in jenkins by using cron compliant format,
Completed documentation regarding the scenario.

8/5/2018
Made some modifications in the documentation on the scenario - Jenkins integration with GIT - SCM,
Gone through Git and GitHub Beginner Tutorial on Branching and Merging concept,
Got to know about few commands those are required for Branching and Merging,
Working with Branching & Merging, made changes in github using git commands through git bash,
Troubleshooted the issue: 
! [rejected] master -> master (fetch first)
error: failed to push some refs to 'git repo url'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
To change repository name > click on particular repository to be changed > goto settings > change the name > click rename
 
9/5/2018 
Done documentation on the following:
Git & Git Hub Introduction,
Installing Git on windows,
Creating a branch,
Merging a branch,
Deleting a branch,
Working with the scenario i.e., accessing files from a new branch in git repository other than using master branch from jenkins.

10/5/2018
Gone through the Git and GitHub Beginner Tutorial on how to send email from GitHub,
Done with the scenario successfully on how to trigger notification email from github whenever there is a change/commit in the project by:
Adding Email service to get notification to the particular email address and
Tested and validated the scenario by making some changes in the project to check whether notification is triggered or not,
Done with the documentation regarding the above mentioned scenario.

11/5/2018
Gone through the Git and GitHub Beginner Tutorial regarding creating users and managing roles,
Installed Role-based Authorization strategy plugin,
Created and Cofigured new users in jenkins dashboard,
Created and Assigned users to roles,
Plugin enables user authorization and roles can be defined globally or for particular jobs or nodes selected by regular expressions,
Controlled user access on projects by creating global role employee and project roles developer and tester.

14/5/2018
Gone through Git and GitHub Beginner Tutorial on git tags,
Got to know about: 
Branching versus tags,
Tags which allow you to refer to a specific commit in a repository,
Difference between tags and annotated tags,
Worked with the git tag commands to create tags and annotated tags also deleted tags,
Working with Display or show tags.

15/5/2018
Done documentation on branching versus tags, creation of tags, annotated tags and displaying tags.
Worked with show or display tags,
Pushed tags to remote repository,
Using git commands:
Deleted tags from local,
Deleted tags from remote,
Deleted multiple tags from local and remote.

16/5/2018
Done documentation on the following:
Viewing the created tags and pushing them to remote repository,
Deleting tags from local & remote repository,
Deleting multiple tags from local and remote,
Got to know about Checksum number, cryptographic hash number, SHA-1 algorithm,
Done with a scenario by creating a tag at a particular commit point inorder to take backup in the midst of several commits.
After creating the tag at the historic point, tags pushed to remote repo only can be seen in releases tab.

17/5/2018
Done documentation on the scenario creating a tag at a particular commit point inorder to take backup in the midst of several commits,
Created a tag for the past commit using checksum number and took a backup at a historic point,-
Done documentation for creating a tag on past commit,
Went through the tutorial on quick basic navigation and keyboard shortcuts for using GitBash and worked on it,
Solved the issue as I had a problem that is after exiting git log in windows git bash, text is disappeared on git bash and unable to access it properly.

18/5/2018
Done doc on using few keyboard shortcuts for using GitBash,
Pulled changes from Git repository on Git hub Cloud,
Parallely done doc on the scenario,
Goning through the git tutorials.

21/5/2018
Used a Git branch to merge a file by following the below steps:
Created a branch and checked it out,
Made a change in the new branch,
Committed the change to the new branch,
Integrated that change back into the main branch,
Deleted the branch you are no longer using.
Working with the documentation on the above scenario.

22/5/2018
Got to know about fast-forward merge,
Done documentation on Merging a branch into master branch using git bash by following steps:
Creating a new branch and make a change,
Merging the branch with master > “fast-forward merging”,
Push your change to GitHub,
Going through the tutorials Git & Git hub - forking concept.

23/5/2018
Done with the following scenario,
Forked an example repository "Spoon-Knife repository"
Synced the fork by
a. Setting up Git
b. Creating a local clone of the fork
c. Configuring Git to sync your fork with the original Spoon-Knife repository


24/5/2018
Done documentation on the following,
Forking an example repository "Spoon-Knife repository",
Syncing the fork by,
a. Setting up Git
b. Creating a local clone of the fork
c. Configuring Git to sync your fork with the original Spoon-Knife repository
Gone through the doc in GitHub.com on how to create a pull request from a fork,
Attended KT session on different types of backups and EMC Avamar.

25/5/2018
Done a scenario by creating a pull request from fork,
Working with the documentation on the above scenario,
Got to know how to delete and deleted the forked repo from your GitHub account,
Goning through the different types of backup operations:
Full backup
Incremental backup 
Differential backup

29/5/2018
Done with the documentation on
What exactly is a pull request,
Creating a pull request from fork and 
Opened a pull request
Got to know about git pull vs git and done doc on that

30/5/2018
Gone through the git stash tutorials,
Going through the following commands regarding their usage:
git stash
git list
git stash pop
git stash apply <stashname>

31/5/2018
Gone through the git fetch tutorials,
Working with the following commands:
git fetch
git merge
git pull
Got to know about the differences between git fetch, git merge and git pull,
Working with the documentation.


1/6/2018
Done with the documentation on the following concepts:
git pull,
git fetch,
git merge &
git pull vs git fetch
Going through the tutorials on git rebase.

4/6/2018
Done with the scenario - stashing changes from one branch to other with ease by following steps:
Created a new file on master branch,
Used command git stash to save file temporarily,
Later moved the file to the new branch,
Used git stash apply command and commit to save the changes from one branch to the other branch i.e., master to new branch.
# Once git stash apply command is used - file is viewed on the new branch and can't be seen on the master branch.

5/6/2018
Done documentation on the scenario - Stashing changes from one branch to other with ease or before checking out a different branch by 
a. Creating a new file on master branch,
b. Used git stash save "message" command to save file temporarily,
c. Moved file to the new branch by using git stash apply command,
d. And committed to save the changes from one branch to the other branch.
Solved the issue "error: you need to resolve your current index first the file: needs merge"

6/6/2018
Done the documentation on the following,
What is Stashing &
When to Stash your work
Done with a scenario by 
Stashing files using git stash command
Unstashed files by using git stash pop command on the same branch.


7/6/2018
Got to know about and worked with the following commands:
git stash pop
git stash drop
git stash drop <stash_id>
git stash clear
Working with git stash document in detail.

8/6/2018
Done with the documentation on the following:
Re-applying the stashed changes,
Stashing untracked or ignored files,
Managing multiple stashes,
Worked with scenario i.e., applying the same stashed changes to multiple branches,
Getting to know about the procedure on how to unapply the stash.

11/6/2018
Got to know about and working with the following commands:
git diff 
git diff --staged 
git diff HEAD 
git diff --color-words
git diff --word-diff
git diff --stat

[git diff (working directory differs from staging area)
git diff --staged (staging area & repository)
git diff HEAD (compares working tree and the most recent commit)
git diff id1 id2 (compare btwn two commit coz once committed only ids are generated)\
git diff --color-words
git diff --word-diff
git diff --stat

12/6/2018
Done with the documentation on:
How to get commit ID,
Diff between working directory and staging area,
Diff between staging area and last commit,
Diff between last commit and working directory,
Diff between 2 commits in the same branch,
How to find what files are changed.

13/6/2018
Got to about the following and done doc on:
What happens if you create a new branch?
How does Git know what branch you’re currently on?
How to find what commit is current HEAD?
What is detached HEAD?
Stashing untracked files using different options.

14/6/2018
Created a branch from another branch using git bash.
Worked with git branch commands with various options:
-a which shows all local and remote branches
-r which shows only remote branches
Figured out what branches are on remote by actually using the remote related commands:
git remote
git ls-remote

15/6/2018
Done documentation on the following:
Creation of a branch from the other branch,
On git branch commands with various options -a and -r,
On git remote and git ls-remote to figure out what branches are on remote,
On git diff with option 'color' for a single file and for multiple files.
Worked with the commands to configure vimdiff as default git difftool and
Turn off the prompt globally which prompts always asking to launch the vimdiff or not.

18/6/2018
Gone through git difftool tutorials
Worked with the following commands and done doc on them
vimdiff file1 file2
git difftool filename before and after staging 
git checkout filename
git diff commitid1 commitid2
git difftool HEAD HEAD^ filename 

19/6/2018
Worked with the following commands:
git diff HEAD which compares between the working tree and the HEAD - most recent commit,
git show commitid 
 eg: git show b9438 ( first 5 alphanumeric in commit id)
git revert commitid
 eg: git revert b9438 ( first 5 alphanumeric in commit id)
git clean -f used to remove untracked files,
git clean -xdf even removes all ignored files,
Got to know about shortcuts in git bash
Ctrl + Ins (to copy the content from the terminal)
Shift + Ins (to paste the content from the terminal)

25/6/2018
Done documentation on the following commands to know their usage:
git diff HEAD,
git show commitid,
git revert commitid,
git clean -f used to remove untracked files,
Went through the .gitignore tutorials,
Working with the .gitignore file,
Working with the command i.e., git clean -xdf which removes all the  ignored files.

26/6/2018
Got to know about git ignore patterns where .gitignore uses globbing patterns to match against file names,
Worked with and done documentation on,
Ignoring files using .gitignore file by creating a local .gitignore
1.	In Terminal, navigate to the location of your Git repository,
2.	Enter touch .gitignore to create a .gitignore file,
Ignored previously committed file,
Committed an ignored file.

27/6/2018
Worked with and got to know about git clean command and its options,
Done documentation on the following,
git clean -n
git clean -f
git clean -dn
git clean -df
Working with the git clean command to remove ignored files

28/6/2018
Done working with the git clean command to remove ignored files using the options -xf,
Also done document on the above scenario,
Worked with Interactive mode or git clean interactive mode using various commands in it such as,
1: clean
2: filter by pattern
3: select by numbers
4: ask each 
5: quit
6: help
Working with the commands filter by pattern and select by numbers.

29/6/2018
Done document on Interactive mode or git clean interactive mode using various commands in it such as,
1: clean
4: ask each 
5: quit
6: help
Working with the following scenarios for changing the commit message in two ways,
1. Commit has not been pushed online
2. Amending older or multiple commit messages

2/7/2018
Worked with the following scenarios and done with the documentation.
1. Procedures for amending the commit that has not been pushed online
(i)Changing a commit message that is rewriting the most recent commit message which is not pushed into github repository.
2. Procedures for amending older commit messages
(i) Amending the message of the most recently pushed commit.
(ii)Amending older commit message after a file is pushed into GitHub.

3/7/2018
Worked with the following interactive rebase commands 
pick which will keep the commit.
reword allows to edit the commit message.
edit will pause the rebase process so you can make more changes to the commit.
squash will condense the commit into the previous commit and let you edit the commit message.
fixup will condense the commit into the previous commit without editing the commit message.
drop will remove the commit or you can simply delete the line from the file.

5/7/2018
Done documentation on the following,
What is git rebase?
what is the usage of git rebase?
Use of the git interactive rebase command,
$ git rebase -i HEAD~3
Usage of the interactive rebase commands,
pick
reword
exit

6/7/2018
Done documentation on the following,
Normal Rebase vs Interactive Rebase,
squash which is a interactive rebase command,
drop also an interactive rebase command,
Git rebase interactive drop vs deleting the commit line,
Working with git rebase exec command.

9/7/2018
Got to know about the following and working with the documentation,
What is reset,
Three trees of git,
Different command line arguments such as:
- soft only changes HEAD, but doesn’t change staged files in index or working files,
- mixed moves HEAD and updates the index with the contents of the revision to which HEAD now points,
- hard moves HEAD and updates the index and working directory—this is the only version of reset that can cause data loss.

10/7/2018
Done documentation on the following,
What is reset and three trees of git,
What happens if the following commands are performed,
git reset HEAD
git reset HEAD~1
git reset HEAD~2
Working of reset,
Difference between git checkout and git reset

11/7/2018
Got to know about the following:
Scope of git reset modes,
All the options available for commit and reset,
Worked with the following examples:
Undo add,
Undo a commit,
Undo a merge or pull,
Reset a single file in the index.

12/7/2018
Done documentation on the git reset modes,
git reset --soft
git reset --mixed
git reset --hard
git reset --merge
How to reset a single file using command git reset -- filename

13/7/2018
Got to know the difference about HEAD vs ORIG_HEAD,
Done with the following examples:
Undo commits permanently,
Undo a commit and redo,
Undoing a merge or pull inside a dirty working tree,
Working with the scenario on how to deal with an interrupted workflow.

16/7/2018
Got to know about snapshot,
Done working with the scenario and also document on how to deal with an interrupted workflow,
Worked with the command $ git revert -n commit_id
Also got to know the difference between the commands,
$ git revert commit_id and $ git revert -n commit_id,
Gone through the tutorial on Undoing vs Reverting vs Resetting.

17/7/2018
Done documentation on the following,
Undoing the code changes for a single file,
Undoing the code changes for multiple files at a time,
Committing code changes directly using the command $ git revert commit_id,
Also committing code changes explicilty using the command with the option -n, $ git revert -n commit_id,
Resetting the code changes and moving to the previous commit history.

18/7/2018
Done document on the following,
Revert vs Reset,
Reset can be used in different scenarios,
Scenario-1: When you have made some changes and you no longer wanted them to be committed you just wanted to go back to the older clean state
Scenario-2: When you wanted to go to two commits back
Scenario-3: When you are doing git pull. It might result in merging errors. In this case you might just want to get rid of the mess, then you can simply use 
Scenario-4: You might have added a file to commit using  git add abc.c but later you realized you do not want to add then you can get it back
Going through the tutorials regarding git cherry-pick.

19/7/2018
Got to about the following,
What is Git cherry-pick,
Use cases of cherry-pick,
Cherry-picking becomes very useful and essential when it comes to bug fixing.
This could also be useful whenever a full branch merge is not possible due to incompatible versions in the various branches.
Also, you can use git cherry-pick to pull the changes introduced to a sub-branch, without changing the branch, by your colleague working on the same project.
Working with the documentation on the above.

20/7/2018
Worked with and done documentation on the following,
git cherry-pick <commit-id>
Viewing the Commit History with different options,
git log --stat
git log --pretty=oneline
git log --pretty=fuller
git log --pretty=format:"%h - %an, %ar : %s"
Also many other useful options for git log --pretty=format

about git log url > https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History(patch)
cherry pick abort continue > file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-cherry-pick.html
https://www.quora.com/What-is-the-difference-between-the-reset-and-revert-commands-in-the-Git-version-control-system
---------------
git gui
reset vs revert
git reset --keep
git rebase --abort,
git rebase --continue,
git rebase --skip,
git rebase --quit,
rebase exec
git cherry pick
patch
git tutorial
reflog
--------------

 


ref: file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-reset.html
ref1: https://stackoverflow.com/questions/2530060/can-you-explain-what-git-reset-does-in-plain-english


------------------------------------------------------------------------------------------------------------
tasks: 
https://help.github.com/enterprise/2.13/user/articles/changing-a-commit-message/
https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning
https://www.youtube.com/watch?v=FyAAIHHClqI
https://www.git-tower.com/learn/git/ebook/en/command-line/branching-merging/stashing > when to stash
https://git-scm.com/book/en/v1/Git-Tools-Stashing > stashing
https://git-scm.com/book/en/v2/Git-Branching-Rebasing > rebasing
https://orga.cat/posts/most-useful-git-commands > all git cmnds
https://www.youtube.com/watch?v=jza3xtBVjMc > git reset and git revert
https://www.youtube.com/watch?v=ErJyWO8TGoM > .gitignore
https://gettinggit.com/learn > all the concepts category wise

Ctrl + Ins (to copy the content from the terminal)
Shift + Ins (to paste the content from the terminal)
-----------------------------------------------------------------------------------------------------------------------

NOTES:
git clean -f will remove untracked files,meaning they're gone for good since they aren't stored in the repository.
Make sure you really want to remove all untracked files before doing this.
git reset --hard will not remove untracked files, 
where as git-clean will remove any files from the tracked root directory that are not under Git tracking.
git log --pretty-oneline
git log --pretty-oneline | grep NewB > will get all the commits of NewB branch

------------------------------------------------------------------------------------------------------------------------------------
scenarios:

diff btw reset n revert, chckout n reset, head n head~2(diagramatically)
need to work with "git exec rebase command "
exec,onto,nooff,todolist
rebase indepth > https://wilsonmar.github.io/git-rebase/
git reflog > https://www.atlassian.com/git/tutorials/rewriting-history
git reflog --relative-date
git bisect
git reset --soft
git reset --hard
git reset --mixed
patch
git reset --hard HEAD
How to create a branch from previous commit in git
Creating a Branch from a Stash
Creating a Branch from a Stash
diff tool
Going through the git diff tutorial.
git stash unapply - git stash show -p 
git diff
.gitignore
nxt scenario -> https://www.atlassian.com/git/tutorials/saving-changes/git-stash
git commit --amend > command to change the commit message if not pushed to remote repo
git reset HEAD s2 -> s2 - filename
git log -- s2
deletd s2 and restore it
about integration
https://www.atlassian.com/git/tutorials/using-branches/git-merge
git merge
how it works
preparing to merge
confirm the receiving branch
fetch latest remote commits --> git fetch
fast forward merge
3-way merge
resolving conflict
how conflicts are presented
rebase -----------------------------------------------------------------------------1 https://superuser.com/questions/751699/is-there-a-way-to-edit-a-commit-message-in-github/751909
rebase vs merging ------------------------------------------------------------------2
stash bfore rebase and merge -------------------------------------------------------3
changing a commit message -> https://help.github.com/enterprise/2.13/user/articles/changing-a-commit-message/
git log -3 --graph -> shows last three commits
git cherry pick
setting private and public repos in github
no need to give git credentials if it is a public repo
git clone https://github.com/doddam/myRepo.git - Clone a remote repository
git clone https://github.com/doddam/myRepo.git . - Clone a remote repository in the current directory
file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-reset.html


--------------------------------------------------------------------------------------------------------------------------

Summary & note:

Get a repo from somewhere:
clone

Create a repo from scratch:
init

Work in linear fashion on the current branch:
add
commit
mv
rm

Work with branches themselves:
branch
checkout
merge

For working in and with branches:
reset

Get information about things:
log
status
diff
show

For syncing your repo to and from others:
fetch
pull
push

For searching history:
grep

For marking objects, typically commits:
tag

For being cool (most versioners can't even do these):
bisect
rebase
-------------------------------------------------------------------------------------------------------------------

Jenkins:

Context Path (required): /jenkins
XML Configuration file URL:  (:C:/path/to/context.xml)->/data/Tomcat/conf/context.xml
WAR or Directory URL: -> path to context.xml  -> (/path/to/bar.war!/) ->  /home/dmanasa/Desktop/jenkins.
/jenkins
/data/Tomcat/conf
/home/dmanasa/Desktop
https://www.nagios.org/about/overview/ -> nagios working
http://docs.ansible.com/ansible/latest/playbooks_loops.html#standard-loops
Task -> create numb8/er of child branches and integrate to master branch
Task -> Configuring GitHub for Jenkins -> https://valuebound.com/resources/blog/continuous-integration-using-jenkins-and-github-to-automate-deployment
Task -> about git extensions -> https://media.readthedocs.org/pdf/git-extensions-documentation/latest/git-extensions-documentation.pdf
Task -> setup jenkins.war in tomcat and run it 
Task -> Deploying a war file from Jenkins to Tomcat(https://www.packtpub.com/mapt/book/virtualization_and_cloud/9781788471060/5/05lvl1sec34/deploying-a-war-file-from-jenkins-to-tomcat)
link -> http://www.baeldung.com/jenkins-job-schedule
task -> git hub witheclipse
https://wilsonmar.github.io/git-rebase/

Reference: https://www.tutorialspoint.com/jenkins/jenkins_git_setup.htm
https://www.cloudbees.com/blog/using-git-jenkins
In your Jenkins Dashboard (Home screen), click the Manage Jenkins option on the left hand side.
github branches in jenkins
--------------------------------------------------------------------------------------------------------------------

personal:
pb887766@gmail.com

tablets: 
may - 6th
june - 4th

------------------------------------------------------------------------------------------------------------------------

1417178000010632
ifsc - KVBL0001417
108.anilkumar@gmail.com

-------------------------------------------------------------------

116+k+s(rng)
108r+116+16rnds(rng)
111111111111111111111111111111111



--------------------------------------------------------------------

ppts on git:
-----------

https://www.quora.com/Where-can-I-learn-Git
https://www.slideshare.net/HubSpot/git-101-git-and-github-for-beginners

fatal: unable to access repository url SSL certificate problem: self signed certificate in certificate chain
error: Could not fetch origin


git config http.sslVerify false



10/4/2018
Downloaded jenkins on windows
Started jenkins using command prompt and done with the following command to extract the .war file (java -jar jenkins.war). 
Accessed jenkins through the link −> http://localhost:8080
Jenkins dashboard is opened by providing user name and password
Exploring jenkins dashboard/console
Changed the port from 8080 to 8088 using the command java -jar jenkins.war --httpPort=8088 and accessed jenkins through http://localhost:8088
Troubleshooting the issue regarding plugins as default plugins are not available in the dashboard.

11/4/2018
Working with the scenario: Compiling and running a java file in jenkins on Windows i.e., by integrating Jenkins and GitHub (with the GitHub Jenkins Plugin)
Exploring GitHub repository
Created an account in github -> https://github.com/ and created a new repository
Uploaded some files into repository by browsing the fil path and committed the changes.
Checked the files present in the particular repo whether they are committed or not.
Modified files which are already uploaded in the repo and again committed
Deleted files in the repository by selecting particular file to be deleted and again committed
I have pushed the code into the git repository and committed the changes required, debugging the plugins issue in jenkins and doing documentation parallely.

12/4/2018
Done with a scenario Git Plugin setup in Jenkins
Downloaded the latest Git.exe file for Windows and Installed 
Aaccessing git from windows command prompt without using Github server
Got to know about Git advantages
Working with git commands which are used to set a git repository

13/4/2018
Working with the scenario integrating jenkins and github i.e., Compiling and running a java file in jenkins on Windows
Successfully pushed the code into git repository
But unable to push code from git repository to the jenkins because of the following issue.
  Error occurred due to "SSL certificate problem: self signed certificate in certificate chain"
To check the issue, I have cloned files from the repository to local environment. But again faced the same issue.
Unable to access git, so troubleshooting the above issue.

16/4/2018
Done with the scenario:
Integrating jenkins and github via github plugin; i.e., Compiling and running a java application in jenkins on Windows
Created a job in jenkins
Configured the job with respective details:
 Gave Project details and GitHub url (as my repository is hosted from github)
 Selected Source Code Management (SCM) as Git and provided the respective url
 Next pushed the code; now coming to Build section, opted for add build step 
 Gave the commands required for compiling and running the application by selecting the option Execute Windows batch command.
 Saved and Build the job successfully; Now build history is seen by clicking #1 
 Output is viewed in console output section once job is build successfully.
 
17/4/2018
Doing research and development on pull request and merge request,
Attended KT session on NOC (Network Operations Center) and Nagios,
Done with the issue "SSL certificate problem: self signed certificate in certificate chain",
Tested Jenkins by picking up an appilcation from git repositroy to integrate,
Troubleshooting the issue: Class names, are only accepted if annotation processing is explicitly requested.

18/4/2018
Done with the issue "Class names, are only accepted if annotation processing is explicitly requested",
Tested the scenario again in Jenkins by picking up an appilcation from git repositroy to integrate - worked fine,
Done documnetation on the scenarios: Jenkins - Git Setup & Integrating Jenkins - GitHub
Attended KT session on disk alerts and application alerts
Getting to know about Network Operations Center, its design and managing NOC

19/4/2018
Got to know about 
Booting process in linux
Steps involved in the booting process
Commands to Monitor Swap Space Usage in Linux
Usage of nice and renice commands
Exploring the git gui 
Doing r&d on git on windows

20/4/2018
Attended a meeting on an effective communication,
Got to know about logrotate,
Doing r&d on git extension on windows,
Working with the scenario Jenkins Tomcat setup,
Troubleshooting the issue "FAIL - Application at context path [/jenkins] could not be started".
 
23/4/2018
Done with the issue "FAIL - Application at context path [/jenkins] could not be started",
Configured the following in tomcat web application manager to deploy jenkins.war file,
Context Path 	
XML Configuration file URL	
WAR or Directory URL
Successfully deployed jenkins.war in the tomcat,
Troubleshooting the issue "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists" while accessing the jenkins.

24/4/2018
I have been monitoring mails,
Started the jenkins application from tomcat, message is displayed as "OK - Started application at context path [/jenkins]",
Tried to access jenkins through http://localhost:8080/jenkins/ but facing the issue "HTTP Status 404 – Not Found",
Troubleshooting the above issue,
Meanwhile trying to deploy jenkins.war directly by uploading WAR file without configuring, but unable to do so because the connection to the server was reset while the page was loading.

25/4/2018
Checked the opened ports on the system by using netstat command and its options,
And changed the tomcat port as jenkins and tomcat are running on the same port; some port conflicts occurred,
Stopped the tomcat server
Opened Tomcat_Home/conf/server.xml file to edit 
Looked for the port *8080* in the xml file and replaced with the other available port.
<Connector port="8080" protocol="HTTP/1.1" 
connectionTimeout="20000" 
redirectPort="8443" />
Wrote playbook for deploying jenkins.war in the tomcat,
Successfully deployed jenkins.war in the tomcat,

26/4/2018
Working with the scenario jenkins tomcat setup,
Modifying the playbook jenkins.war,
Working with the ansible modules that enables the port 8080 such that jenkins would run on that port,
Troubleshooting the issues:
Encountered exception [javax.management.RuntimeOperationsException: Exception invoking method check],
403 Access Denied - You are not authorized to view this page
By default the Manager is only accessible from a browser running on the same machine as Tomcat. If you wish to modify this restriction, you'll need to edit the Manager's context.xml file. 

27/4/2018
Done with the scenario jenkins tomcat setup on windows,
Installed tomcat on windows,
Changed the default port of tomcat server in conf/tomcat-users.xml,
Downloaded jenkins.war,
Placed the jenkins.war file in webapps folder,
And successfully deployed jenkins.war application in tomcat web application manager,
Accessed the jenkins application from the tomcat,
Working with the documentation for the scenario jenkins-tomcat setup.

2/5/2018
Done with the documentation jenkins-tomcat setup,
Done with the scenario, jenkins picks up a java application from local system which is placed in the jenkins workplace an then a job is build,
Done document on the above scenario,
Attended KT session on 
LDAP servers,Active Directory,User creation in Physical box and VM.

3/5/2018
Went through the LDAP and AD also Git tutorial sessions,
Installed git on windows and accessed it from git bash,
After building the project (integrating Jenkins and Git) received the above error on the console output section,
" ERROR: Error cloning remote repo 'origin' "
Troubleshooted above issue by performing the below steps:
1. Go to Manage Jenkins  >  Global Tool Configurations 
2. Under Git configuration  >  Git installations 
3. Enter complete path to git executable including git.exe  > Save  > Again build the project
Done with the job jenkins and github integration and built it in other way through global tool configuration.

4/5/2018
Went through the jenkins beginner tutorial regarding:
Scheduling cron jobs in jenkins and 
About the build trigger configuration with options build periodically and Poll SCM ,
Done with a scenario Jenkins integration with GIT - SCM successfully,
Configured Poll SCM in build triggers by scheduling cron job,
Working with the documentation.

7/5/2018
Done with the documentation on the scenario - Jenkins integration with GIT - SCM,
Done with a scenario - scheduling a job in jenkins by using the option build periodically in build trigger section,
Scheduled job in jenkins by using cron compliant format,
Completed documentation regarding the scenario.

8/5/2018
Made some modifications in the documentation on the scenario - Jenkins integration with GIT - SCM,
Gone through Git and GitHub Beginner Tutorial on Branching and Merging concept,
Got to know about few commands those are required for Branching and Merging,
Working with Branching & Merging, made changes in github using git commands through git bash,
Troubleshooted the issue: 
! [rejected] master -> master (fetch first)
error: failed to push some refs to 'git repo url'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
To change repository name > click on particular repository to be changed > goto settings > change the name > click rename
 
9/5/2018 
Done documentation on the following:
Git & Git Hub Introduction,
Installing Git on windows,
Creating a branch,
Merging a branch,
Deleting a branch,
Working with the scenario i.e., accessing files from a new branch in git repository other than using master branch from jenkins.

10/5/2018
Gone through the Git and GitHub Beginner Tutorial on how to send email from GitHub,
Done with the scenario successfully on how to trigger notification email from github whenever there is a change/commit in the project by:
Adding Email service to get notification to the particular email address and
Tested and validated the scenario by making some changes in the project to check whether notification is triggered or not,
Done with the documentation regarding the above mentioned scenario.

11/5/2018
Gone through the Git and GitHub Beginner Tutorial regarding creating users and managing roles,
Installed Role-based Authorization strategy plugin,
Created and Cofigured new users in jenkins dashboard,
Created and Assigned users to roles,
Plugin enables user authorization and roles can be defined globally or for particular jobs or nodes selected by regular expressions,
Controlled user access on projects by creating global role employee and project roles developer and tester.

14/5/2018
Gone through Git and GitHub Beginner Tutorial on git tags,
Got to know about: 
Branching versus tags,
Tags which allow you to refer to a specific commit in a repository,
Difference between tags and annotated tags,
Worked with the git tag commands to create tags and annotated tags also deleted tags,
Working with Display or show tags.

15/5/2018
Done documentation on branching versus tags, creation of tags, annotated tags and displaying tags.
Worked with show or display tags,
Pushed tags to remote repository,
Using git commands:
Deleted tags from local,
Deleted tags from remote,
Deleted multiple tags from local and remote.

16/5/2018
Done documentation on the following:
Viewing the created tags and pushing them to remote repository,
Deleting tags from local & remote repository,
Deleting multiple tags from local and remote,
Got to know about Checksum number, cryptographic hash number, SHA-1 algorithm,
Done with a scenario by creating a tag at a particular commit point inorder to take backup in the midst of several commits.
After creating the tag at the historic point, tags pushed to remote repo only can be seen in releases tab.

17/5/2018
Done documentation on the scenario creating a tag at a particular commit point inorder to take backup in the midst of several commits,
Created a tag for the past commit using checksum number and took a backup at a historic point,-
Done documentation for creating a tag on past commit,
Went through the tutorial on quick basic navigation and keyboard shortcuts for using GitBash and worked on it,
Solved the issue as I had a problem that is after exiting git log in windows git bash, text is disappeared on git bash and unable to access it properly.

18/5/2018
Done doc on using few keyboard shortcuts for using GitBash,
Pulled changes from Git repository on Git hub Cloud,
Parallely done doc on the scenario,
Goning through the git tutorials.

21/5/2018
Used a Git branch to merge a file by following the below steps:
Created a branch and checked it out,
Made a change in the new branch,
Committed the change to the new branch,
Integrated that change back into the main branch,
Deleted the branch you are no longer using.
Working with the documentation on the above scenario.

22/5/2018
Got to know about fast-forward merge,
Done documentation on Merging a branch into master branch using git bash by following steps:
Creating a new branch and make a change,
Merging the branch with master > “fast-forward merging”,
Push your change to GitHub,
Going through the tutorials Git & Git hub - forking concept.

23/5/2018
Done with the following scenario,
Forked an example repository "Spoon-Knife repository"
Synced the fork by
a. Setting up Git
b. Creating a local clone of the fork
c. Configuring Git to sync your fork with the original Spoon-Knife repository


24/5/2018
Done documentation on the following,
Forking an example repository "Spoon-Knife repository",
Syncing the fork by,
a. Setting up Git
b. Creating a local clone of the fork
c. Configuring Git to sync your fork with the original Spoon-Knife repository
Gone through the doc in GitHub.com on how to create a pull request from a fork,
Attended KT session on different types of backups and EMC Avamar.

25/5/2018
Done a scenario by creating a pull request from fork,
Working with the documentation on the above scenario,
Got to know how to delete and deleted the forked repo from your GitHub account,
Goning through the different types of backup operations:
Full backup
Incremental backup 
Differential backup

29/5/2018
Done with the documentation on
What exactly is a pull request,
Creating a pull request from fork and 
Opened a pull request
Got to know about git pull vs git and done doc on that

30/5/2018
Gone through the git stash tutorials,
Going through the following commands regarding their usage:
git stash
git list
git stash pop
git stash apply <stashname>

31/5/2018
Gone through the git fetch tutorials,
Working with the following commands:
git fetch
git merge
git pull
Got to know about the differences between git fetch, git merge and git pull,
Working with the documentation.


1/6/2018
Done with the documentation on the following concepts:
git pull,
git fetch,
git merge &
git pull vs git fetch
Going through the tutorials on git rebase.

4/6/2018
Done with the scenario - stashing changes from one branch to other with ease by following steps:
Created a new file on master branch,
Used command git stash to save file temporarily,
Later moved the file to the new branch,
Used git stash apply command and commit to save the changes from one branch to the other branch i.e., master to new branch.
# Once git stash apply command is used - file is viewed on the new branch and can't be seen on the master branch.

5/6/2018
Done documentation on the scenario - Stashing changes from one branch to other with ease or before checking out a different branch by 
a. Creating a new file on master branch,
b. Used git stash save "message" command to save file temporarily,
c. Moved file to the new branch by using git stash apply command,
d. And committed to save the changes from one branch to the other branch.
Solved the issue "error: you need to resolve your current index first the file: needs merge"

6/6/2018
Done the documentation on the following,
What is Stashing &
When to Stash your work
Done with a scenario by 
Stashing files using git stash command
Unstashed files by using git stash pop command on the same branch.


7/6/2018
Got to know about and worked with the following commands:
git stash pop
git stash drop
git stash drop <stash_id>
git stash clear
Working with git stash document in detail.

8/6/2018
Done with the documentation on the following:
Re-applying the stashed changes,
Stashing untracked or ignored files,
Managing multiple stashes,
Worked with scenario i.e., applying the same stashed changes to multiple branches,
Getting to know about the procedure on how to unapply the stash.

11/6/2018
Got to know about and working with the following commands:
git diff 
git diff --staged 
git diff HEAD 
git diff --color-words
git diff --word-diff
git diff --stat

[git diff (working directory differs from staging area)
git diff --staged (staging area & repository)
git diff HEAD (compares working tree and the most recent commit)
git diff id1 id2 (compare btwn two commit coz once committed only ids are generated)\
git diff --color-words
git diff --word-diff
git diff --stat

12/6/2018
Done with the documentation on:
How to get commit ID,
Diff between working directory and staging area,
Diff between staging area and last commit,
Diff between last commit and working directory,
Diff between 2 commits in the same branch,
How to find what files are changed.

13/6/2018
Got to about the following and done doc on:
What happens if you create a new branch?
How does Git know what branch you’re currently on?
How to find what commit is current HEAD?
What is detached HEAD?
Stashing untracked files using different options.

14/6/2018
Created a branch from another branch using git bash.
Worked with git branch commands with various options:
-a which shows all local and remote branches
-r which shows only remote branches
Figured out what branches are on remote by actually using the remote related commands:
git remote
git ls-remote

15/6/2018
Done documentation on the following:
Creation of a branch from the other branch,
On git branch commands with various options -a and -r,
On git remote and git ls-remote to figure out what branches are on remote,
On git diff with option 'color' for a single file and for multiple files.
Worked with the commands to configure vimdiff as default git difftool and
Turn off the prompt globally which prompts always asking to launch the vimdiff or not.

18/6/2018
Gone through git difftool tutorials
Worked with the following commands and done doc on them
vimdiff file1 file2
git difftool filename before and after staging 
git checkout filename
git diff commitid1 commitid2
git difftool HEAD HEAD^ filename 

19/6/2018
Worked with the following commands:
git diff HEAD which compares between the working tree and the HEAD - most recent commit,
git show commitid 
 eg: git show b9438 ( first 5 alphanumeric in commit id)
git revert commitid
 eg: git revert b9438 ( first 5 alphanumeric in commit id)
git clean -f used to remove untracked files,
git clean -xdf even removes all ignored files,
Got to know about shortcuts in git bash
Ctrl + Ins (to copy the content from the terminal)
Shift + Ins (to paste the content from the terminal)

25/6/2018
Done documentation on the following commands to know their usage:
git diff HEAD,
git show commitid,
git revert commitid,
git clean -f used to remove untracked files,
Went through the .gitignore tutorials,
Working with the .gitignore file,
Working with the command i.e., git clean -xdf which removes all the  ignored files.

26/6/2018
Got to know about git ignore patterns where .gitignore uses globbing patterns to match against file names,
Worked with and done documentation on,
Ignoring files using .gitignore file by creating a local .gitignore
1.	In Terminal, navigate to the location of your Git repository,
2.	Enter touch .gitignore to create a .gitignore file,
Ignored previously committed file,
Committed an ignored file.

27/6/2018
Worked with and got to know about git clean command and its options,
Done documentation on the following,
git clean -n
git clean -f
git clean -dn
git clean -df
Working with the git clean command to remove ignored files

28/6/2018
Done working with the git clean command to remove ignored files using the options -xf,
Also done document on the above scenario,
Worked with Interactive mode or git clean interactive mode using various commands in it such as,
1: clean
2: filter by pattern
3: select by numbers
4: ask each 
5: quit
6: help
Working with the commands filter by pattern and select by numbers.

29/6/2018
Done document on Interactive mode or git clean interactive mode using various commands in it such as,
1: clean
4: ask each 
5: quit
6: help
Working with the following scenarios for changing the commit message in two ways,
1. Commit has not been pushed online
2. Amending older or multiple commit messages

2/7/2018
Worked with the following scenarios and done with the documentation.
1. Procedures for amending the commit that has not been pushed online
(i)Changing a commit message that is rewriting the most recent commit message which is not pushed into github repository.
2. Procedures for amending older commit messages
(i) Amending the message of the most recently pushed commit.
(ii)Amending older commit message after a file is pushed into GitHub.

3/7/2018
Worked with the following interactive rebase commands 
pick which will keep the commit.
reword allows to edit the commit message.
edit will pause the rebase process so you can make more changes to the commit.
squash will condense the commit into the previous commit and let you edit the commit message.
fixup will condense the commit into the previous commit without editing the commit message.
drop will remove the commit or you can simply delete the line from the file.

5/7/2018
Done documentation on the following,
What is git rebase?
what is the usage of git rebase?
Use of the git interactive rebase command,
$ git rebase -i HEAD~3
Usage of the interactive rebase commands,
pick
reword
exit

6/7/2018
Done documentation on the following,
Normal Rebase vs Interactive Rebase,
squash which is a interactive rebase command,
drop also an interactive rebase command,
Git rebase interactive drop vs deleting the commit line,
Working with git rebase exec command.

9/7/2018
Got to know about the following and working with the documentation,
What is reset,
Three trees of git,
Different command line arguments such as:
- soft only changes HEAD, but doesn’t change staged files in index or working files,
- mixed moves HEAD and updates the index with the contents of the revision to which HEAD now points,
- hard moves HEAD and updates the index and working directory—this is the only version of reset that can cause data loss.

10/7/2018
Done documentation on the following,
What is reset and three trees of git,
What happens if the following commands are performed,
git reset HEAD
git reset HEAD~1
git reset HEAD~2
Working of reset,
Difference between git checkout and git reset

11/7/2018
Got to know about the following:
Scope of git reset modes,
All the options available for commit and reset,
Worked with the following examples:
Undo add,
Undo a commit,
Undo a merge or pull,
Reset a single file in the index.

12/7/2018
Done documentation on the git reset modes,
git reset --soft
git reset --mixed
git reset --hard
git reset --merge
How to reset a single file using command git reset -- filename

13/7/2018
Got to know the difference about HEAD vs ORIG_HEAD,
Done with the following examples:
Undo commits permanently,
Undo a commit and redo,
Undoing a merge or pull inside a dirty working tree,
Working with the scenario on how to deal with an interrupted workflow.

16/7/2018
Got to know about snapshot,
Done working with the scenario and also document on how to deal with an interrupted workflow,
Worked with the command $ git revert -n commit_id
Also got to know the difference between the commands,
$ git revert commit_id and $ git revert -n commit_id,
Gone through the tutorial on Undoing vs Reverting vs Resetting.

17/7/2018
Done documentation on the following,
Undoing the code changes for a single file,
Undoing the code changes for multiple files at a time,
Committing code changes directly using the command $ git revert commit_id,
Also committing code changes explicilty using the command with the option -n, $ git revert -n commit_id,
Resetting the code changes and moving to the previous commit history.

18/7/2018
Done document on the following,
Revert vs Reset,
Reset can be used in different scenarios,
Scenario-1: When you have made some changes and you no longer wanted them to be committed you just wanted to go back to the older clean state
Scenario-2: When you wanted to go to two commits back
Scenario-3: When you are doing git pull. It might result in merging errors. In this case you might just want to get rid of the mess, then you can simply use 
Scenario-4: You might have added a file to commit using  git add abc.c but later you realized you do not want to add then you can get it back
Going through the tutorials regarding git cherry-pick.

19/7/2018
Got to about the following,
What is Git cherry-pick,
Use cases of cherry-pick,
Cherry-picking becomes very useful and essential when it comes to bug fixing.
This could also be useful whenever a full branch merge is not possible due to incompatible versions in the various branches.
Also, you can use git cherry-pick to pull the changes introduced to a sub-branch, without changing the branch, by your colleague working on the same project.
Working with the documentation on the above.

20/7/2018
Worked with and done documentation on the following,
git cherry-pick <commit-id>
Viewing the Commit History with different options,
git log --stat
git log --pretty=oneline
git log --pretty=fuller
git log --pretty=format:"%h - %an, %ar : %s"	
Also many other useful options for git log --pretty=format

23/7/2018
Got to know about the following,
Advantage of cherry-pick over merge
Why cherry-pick?
Why can't merge?
What are the commands used for re-writing history (commit --amend, rebase, cherry-pick, merge-squash)
Done some modifications in the presentation for the demo.

24/7/2018
Done documentataion on the following,
Advantage of cherry-pick over merge,
Why cherry-pick?
Why can't merge?
Ways of searching for text in branches using some options in git log command by,
- search string
- match regular expression
Finding branches that contain the commit.

25/7/2018
Worked and done doc with the following:
Advanced Git log option to display the first line of each commit message
Filtering the Commit History using the following
To search for commits that were created by amount
To search for commits that were created by date
To search for commits that were created between two dates
To search for commits that were created by relative references
To search for commits that were created by Author

26/7/2018
Worked and done doc with the following:
Filter commits by their commit message
To show the history related to a file
To search for commits that were created by content
Filtering commits by their range 
Viewing all commits of any branch from any other branch
Created an orphan branch and checking the commands to view the list.

27/7/2018
Got to know about and worked with the following:
What is a patch?
What is the use of patch?
In what scenario do we use patch?
How to create a patch?
View all the files in a patch directory.
How to apply a patch to another branch?
Also done documentation on the above.

31/7/2018
Worked with the some of advanced log commands for graphing and done doc on the following:
Visualizing the commit graph, showing information related to each commit.
To only show the commit id and comment per-commit.
To know the history by checking linear series of commits, and get sense of what was merged in where.
To know history of all the branches like commits and where are they merged.
Decorated the terminal to make easier display with different colors to check what branch is where.

1/8/2018
Worked with the some more advanced log commands for graphing and done doc on the following:
To show commits from oldest to newest
Showing the reference name on each line by adding - -source to the decorated terminal
To view abstract shape of the git repo
To view the significant points in commit history by eliminating all the intermediary commits
To view the whole history of the project inorder to re-introduce the Date info 
Getting to know about Docker

2/8/2018
Worked with reflog commands and done doc on the following,
Got to know about the reflog and why is it important
Reference logs that keeps track of updates to the tip of branches
To get a complete reflog of all references
Pass the branch name inorder to check the reflog for a specific branch
To view previously stashed some changes using the reflog stash command
The returned reference pointers can be passed to other commands

3/8/2018
Got to know about the following,
Why do we need containerization?
What is container?
Difference of conterization over virtualization
Advantages of container
What is docker on container?

6/8/2018
Gone through the docker tutorials
Got to know about the following:
What is Docker?
Why do we use Docker?
What is docker Architecture?
What are the Components present in the docker?

7/8/2018
Got to know the following things about docker
What are Docker Images?
How to pull/download docker images?
How to list available docker images?
How to know detailed information about a docker image?
How to get history of a docker images?
Gone through some tutorials regarding docker images.

8/8/2018
Installed docker toolbox on windows system,
Fixed an issue "Looks like something went wrong in step ´Looking for vboxmanage.exe´... Press any key to continue..." when I click on "Docker Quickstart Terminal",
Got to know following things about docker images,
How to Save or Backup a Docker Images?
How to Restore a Docker Images from a Backup?
How to remove or delete Docker Images?

9/8/2018
Fixed an issue in docker installation "Looks like something went wrong in step 'Checking if machine default exists'...Press any key to continue"
Got to know about what a docker file is?
And what a docker build is?
Troubleshooting the issue "ERROR: Get https://registry-1.docker.io/v2/: x509: certificate signed by unknown authority" and
Also going through the best practices for writing Docker files.

10/8/2018
Created a default docker machine and listed available machines
Used environment commands for the new VM
Connected shell to the new machine
Ran a container with docker run to verify set up of the machine.
Troubleshooting the issue "ERROR: Get https://registry-1.docker.io/v2/: x509: certificate signed by unknown authority".

13/8/2018
Gone through the tutorials and got to know the following things:
What is a Docker Registry?
Why do we use Docker Registries?
Architecture of docker that how a docker file is loaded to a Git Repo and then to jenkins server.
What is a Docker hub?
Working with a scenario to pull a sample image from docker hub.

14/8/2018
Got to about dynamic host configuration protocol server
Troubleshooting the following issues:
#1 VBoxManage.exe: error: Failed to attach the network LUN (VERR_INTNET_FLT_IF_NOT_FOUND) VBoxManage.exe: error: Details: code E_FAIL (0x80004005), component ConsoleWrap, interface IConsole
#2 Error checking TLS connection: ssh command error:
command : ip addr show
err     : exit status 255
output  :
Error checking TLS connection: ssh command error:
command : ip addr show
err     : exit status 255
#3 Error response from daemon: Get https://registry-1.docker.io/v2/: x509: certificate signed by unknown authority

15/8/2018
Troubleshooted the issues by performing following actions,
By regenerating the certificates
Restarted the docker host
Environment variables are set for the command window after restarting the machine
By reinstalling Docker toolbox and Oracle VM VirtualBox
By restarting the docker machine

16/8/2018
Got to know how does the format of a docker file exists?
What are the instructions present in docker file?
Where and what arguments needed to be passed for each instruction?
Got to know sample intructions like,
FROM instruction to start the Dockerfile specifying which image we derive our image from.
MAINTAINER instruction to specify oneself or one's organization as the maintainer of the image by placing one's email address there.
COPY will copy the files into the image.

17/8/2018
Solved the issue "error checking tls connection: error cchecking and/or regenerating the certs: There was an error validating certificates for host "192.168.99.100:2376": dial tcp 192.168.99.100:2376 i/o timeout"
Troubleshooting issue - error response from daemon certificate signed by unknown authority by,
Moving the bin path to last in PATH environment variable.
Changing the content in daemon.json file
Created a new docker machine node1 and regenerated the certificates 
Also tested by restarting new machine and by setting the environment variable.

20/8/2018
Got to know about yum-utils which is a collection of utilities as plugins extending yum in different ways,
What is EPEL and why do we use EPEL repository?
How to enable EPEL repository in CentOS being a root user.
Installed docker package on CentOS using the command # yum install docker
To install docker, the epel repositories must be enabled on the system by issuing # yum install epel-release
Troubleshooting the issue Cannot retrieve metalink for repository: epel/x86_64. Please verify its path and try again
(https://www.tecmint.com/install-docker-and-learn-containers-in-centos-rhel-7-6/)

NIS:
#1 Facing the issue in CentOS Error response from daemon: Get https://registry-1.docker.io/v2/: x509: certificate signed by unknown authority
#2 Cannot retrieve metalink for repository: epel/x86_64. Please verify its path and try again
#3 Facing the issue - One of the configured repositories failed (Unknown),
 and yum doesn't have enough cached data to continue. At this point the only safe thing yum can do is fail.
 
21/8/2018
Installed docker successfully on CentOS,
After installation, started the daemon, checked its status and enabled it using the docker commands,
Verified if Docker works properly by running a container test image and made sure it works by checking the ouptut,
Ran a few basic Docker commands to get some information about docker on the following,
For system-wide information on Docker # docker info
To know docker version # docker version
To get a list of all available Docker commands on the console # docker


22/8/2018
Searched the required image from docker hub and downloaded a docker image.
Pulled an ubuntu image from the docker hub and listed the available images on the host.
Allocated a unique name for every container by using the --name option on command line.
Manipulated containers (start, stop, remove, stats) by addressing its name which is allocated as before.
Got to know about the running containers ID by issuing # docker ps command.
Issued # docker stop command by specifying the container ID to stop the running container  -------- x ------ not as status
Fixed the issue "Docker error cannot delete docker container, conflict: unable to remove repository reference".

23/8/2018
Done documentation on the following concepts,
What is containerization and why do we need containerization 
Difference of containerization and Virtualization
Advantages of container
What is Docker and why do we use docker
What is docker on container

24/8/2018
Done documentation on the following,
What is docker architecture and docker components ?
What is a docker client and docker host/docker enginee ?
What is a docker registry ?
What are docker images and docker containers ?
What is a docker network (Bridge, Host, None)
Also we have other network drivers (Overlay, Mavlan)
What is a docker storage and how many types of storage are available (volumes, bind mounts, tmpfs mounts) 

27/8/2018
Done documentation on the following,
How to install docker package on CentOS 7 and CentOS 6
After docker package has been installed, done the following by using the docker commands 
Starting the daemon 
Checking its status
Enabling it system wide both on CentOS 6 and CentOS 7
Ran a container test image to verify if docker works properly by issuing docker command
How to know the system-wide information on docker, docker version and list of docker commands available on console.

28/8/2018
Going through the tutorials for integrating IBM Integration Bus on docker.
Done documentation on the following,
What is a snapshot image and docker image?
About images, containers, docker deamon, docker client, docker store
How to create or customize docker images?
How to get Docker Images and how to list available docker images?
How to pull / download docker images?

29/8/2018
Viewed detailed information about docker images using docker command # docker insepect <image-id>
Get to know the history of the docker images.
Took backup of an image by archiving it using the image id 
Listed the folder to confirm the docker Image ID is saved or not.
Removed a single image using image id, also deleted multiple images using docker commands
Restored the deleted image by loading the backup file of that particular image
Removed all docker images in a single command and done documentation work on the above.

30/8/2018
Worked with the following,
Pulled a docker image "ubuntu" from the doker hub.
Searched for the image that I need from the list of images by using grep command.
Created a docker container from the docker image which is an instance of the image.
Used the docker command to show only the running containers.
Used the docker command to show both the running and stopped containers.
Used the docker command to show most recently running container and done the documentation on the above.

31/8/2018
Added a tag name and repository name to the docker image.
Done documentation on docker file instructions and explained with examples:
FROM instruction used to specify the valid docker image name.
MAINTAINER instruction specifies about the author who creates the new docker image for the support.
COPY instruction copy files, directories and remote URL files to the destination within the filesystem of the Docker Images. 
RUN instruction used to execute any commands on top of the current image which will create a new layer
CMD instruction sets a command to be executed when running a container. 
WORKDIR instruction sets the working directory.
ENV instruction sets environment variables with key and value and etc.
The way how comments are mentioned in the docker file with an example.

10/9/2018
Got to know about the following things and their objectives,
What is release management and release management support ?
What are the responsibilities of release management ?
What is release planing and release build ?
What is release deployment, early life support and release closure?
What is a release or a release package and release record ?
What is a release unit and configiuration items ?

12/9/2018
Done the documentation on the following,
What is a dockerfile and why it is required ?
How to write a dockerfile by following the dockerfile instructions ?
Created a simple dockerfile for ngnix.
Explained some of the dockerfile commands used in the file.
Built the new image using the command # docker build <path> where path refers to the directory containing the Dockerfile.

13/9/2018
Working with the following scenario,
Created a dockerfile under the /root directory.
Defined the instructions to customize the existing docker image as per the requirement.
Built a docker image from the dockerfile from the instructions.
Ran and tested my customized docker image by launching a docker container

14/9/2018
Worked with and done documentation on the scenario to create a customized image and push into the docker hub,
Created a docker image and named it with a tag and a repository name
Pushed the image to the docker hub by providing the login credentials of docker hub in the terminal
Troubleshooted the issue "Error response from daemon: You cannot push a "root" repository. Please rename your repository to docker.io/<user>/<repo> "
Customized docker image is now available in the docker hub
I have logged in to the https://hub.docker.com/ and checked for my new image in the repository list.

17/9/2018
Done documentation on the following,
How to create a dockerfile under the /root directory.
How to define the instructions to customize the existing docker image.
How to build a docker image from the dockerfile using the instructions.
How to add a tag name and repository name to the image using the image reference id
How to run and test my customized docker image by launching a docker container.
Troubleshooting the issue# E: Unable to locate package nginx while building a dockerfile.

18/9/2018
Toubleshooted the issue#  Another application is holding yum lock .. by removing the file yum.pid in /var/run/
Troubleshooted the issue# E: Unable to locate package nginx while building a dockerfile.
Built a docker image (Apache webserver) successfully by,(DEVOPS GUY! - https://www.youtube.com/watch?v=EGWW7_eCeKA)
Creating a dockerfile using the given instructions.
Building the docker image from the dockerfile
Running the docker container and checked the status of the launched docker container.
Checked the web browser for the apache webserver.

19/9/2018
Done mapping of the ports for running the webserver in the browser.
Done documentation on the scenario building apache webserver image from the dockerfile
By creating dockerfile using the docker instructions to install apache webserver.
Explained docker instructions used in the dockerfile.
On how to build the docker image from the dockerfile using docker command.
How to run the docker container and how to check the status of the launched docker container.
How to check the web browser for the apache webserver.

20/9/2018
Worked with the dockerfiles to know the differences between CMD and ENTRYPOINT instructions.
Created two dockerfiles, one file with CMD instruction and the other with ENTRYPOINT instruction.
Images are built and also created tags using "docker build -t cmdchk:latest ." and "docker build -t epchk:latest ."
Tested the containers with newly created images.
Checked the logs of newly created containers to ensure the application script has run or not
Again ran the new containers by passing the argument "date" and once again tested the logs to check the differences.

21/9/2018
Done documentation on the following, (scenario to show the difference between docker CMD and ENTRYPOINT explained in detailed)
What is the usage of both the instructions CMD and ENTRYPOINT ? 
What are the declarations that can be made in CMD and ENTRYPOINT instructions in shell form and executable form ?
How to create the scripts using CMD instruction and ENTRYPOINT instuction to show the difference between them ?
How to built the scripts and how to create the tags and ran them to create the containers ?
To check the logs and also how to pass an argument to the instructions inorder to the know the complete difference between the instructions.

24/9/2018
Working with the scenario integrating IBM Integration Bus with the docker.(ref:https://github.com/ot4i/iib-docker)
Pulled the latest IIB image from the docker hub where the image contains a full runtime installation of IBM Integration Bus.
Ran the new container of the IBM Integration Bus (IIB) image by accepting the license and exposing the port.
Created a broker and a default integration server by running the IIB container.
Basing on the container name, searched for and got the ip address by using the docker inspect command.
Browsed using the IP address and the port number and the GUI of IBM Integration Bus is opened in the browser.

25/9/2018
For the scenario integrating docker and IBM Integration bus, I have done with the following steps,
Created a message flow in IBM Integration Bus and generated a bar file in the toolkit.
Opened the WEB UI of IIB in the browser by typing the docker client IP address along with port number where docker is installed.
Deployed the bar file in the WEB UI of IBM Integration Bus.
Troubleshooting the issue "Deployment of the bar file of webservices message flow to default server has failed".

26/9/2018
Done documentation on the following like,
How to pull the latest IIB image from the docker hub where the image contains a full runtime installation of IBM Integration Bus.
How to run the new container of the IBM Integration Bus (IIB) image by accepting the license and exposing the port.
How to created a broker and a default integration server by running the IIB container.
How to search for and get the ip address using the docker inspect command basing on the respective container name.
How to browse the GUI of IBM Integration Bus in the browser using the IP address and the port number.

27/9/2018
Troubleshooted the following issue,
Error response from daemon: devmapper: Error mounting '/dev/mapper/docker-8:3-269536477-cd6732d0edad34d1b5b48234d7c2f839c69f1c735f7994226d50a70c2d4be008' on '/var/lib/docker/devicemapper/mnt/cd6732d0edad34d1b5b48234d7c2f839c69f1c735f7994226d50a70c2d4be008'. fstype=xfs options=nouuid,context="system_u:object_r:svirt_sandbox_file_t:s0:c352,c373": structure needs cleaning
<1>[  254.847093] XFS (dm-1): metadata I/O error: block 0x521580 ("xlog_recover_do..(read#2)") error 117 numblks 16
<4>[  254.847568] XFS (dm-1): log mount/recovery failed: error 117
<4>[  254.847744] XFS (dm-1): log mount failed
Error: failed to start containers: 70f5574d8b11
Troubleshooting the issue The deployment of a BAR file to the default server has failed BIP2087 in IIB while integrating with the docker.

28/9/2018
Solving the issue for deploying the bar file in run time environment of iib,
To test the deployment of the bar file, have created a new node and a new integration server and deployed the bar file.
Tested deploying the bar file by creating another docker image and also tested by deploying other bar files.
Started the container and then ran ibm integration commands by issuing the docker exec command in the respctive container.
Ran a new container for ibm integration bus along with the arguments broker and server.

1/10/2018
Deployed the bar file successfully in the integration server that is run time environment of ibm integration bus WEBUI.
As per the requirement and the scenario docker and iib integration, have installed the toolkit ibm integration bus fix pack.
Resolving the following issue:
mqsiprofile has not been run in this environment: LocalIAPIConnect (Not found in java.library.path) 
Check that, 
	1. The integration node is running.
	2. The TCP/IP port used by the integration node's web user interface is active.
	3. The integration node name provided in the connection details matches the name of the integration node if the node is remote.

2/10/2018
Created an application with HTTP nodes in IBM integration bus toolkit.
Deployed the new application in the run time environment of IBM integration bus web UI integrated with docker
Turned the flow statistics on for the resource and checked the messsage flow and flow details in the statistics.
Configured the remote integration node by providing the connection details of the host.
Troubleshooting the issue mqsiprofile has not been run in this environment: LocalIAPIConnect (Not found in java.library.path) while connecting to the remote integration node.

3/10/2018
Successfully done working with the POC i.e., integrating Docker and IBM Integration Bus (IIB)
Resolved the follwoing issues:
Issue#Error getting response; org.apache.http.conn.HttpHostConnectException to given url is refused
Isuue#Error getting response: java.net.SocketTimeoutException: Read timed out
Downloaded and Installed SoapUI on CentOS using Shell script.
Created a new Rest project in SoapUI to test the restful web service of an application which is deployed in the docker WEB UI.
Using the docker host ip and the port assigned to the network application, gave a hit to an IIB application present in docker's run time environment got the response from docker WEB UI.

4/10/2018
Doing the documentation on how the Docker and IBM Integration Bus (IIB) are integrated (on CentOS 7)
Steps to pull the latest iib image from docker hub and view the image using docker command.
Steps on how to run a container with default configuration and view the containers list that are running.
Steps for connecting to the Node's web user interface and mapping to the ports.
Steps on how to view and issue the docker host ip and port on the browser to view the run time environment WEB UI of IIB.
Steps for creating a new application in IBM integration toolkit 10.0.0.11 and develop a message flow in the application containing HTTP nodes.
Steps for configuring the node properties in the message flow and creating a bar file for the application in the IBM integration toolkit.

5/10/2018
Completed doing the documentation work on how the Docker and IBM Integration Bus (IIB) are integrated (on CentOS 7)
Steps for deploying the generated bar file in the WEB UI of IIB.
Steps on how to reslove the issues if the bar file deployment was not successful.
Steps for Downloading and installing the SoapUI via shell script on CentOS 7.
Post installation steps to launch the SoapUI.
Steps to create a new rest project in SoapUI and save the projects. 
Steps on how to hit the message flow using the url and get the response from the docker 
Steps on how do I resolve the issues regarding SoapUI that I have faced while working with the scenario.

8/10/2018
Got to know regarding few other docker instructions and working with the following docker port commands,
How to view a list of the ports defined on a container and lists all port mappings or a specific mapping for a Docker container.
The instruction EXPOSE which tells about Docker the running container listens on specific network ports. 
How to publish the ports and how to map them to the docker host.
Getting to know about the docker compose expose versus ports.
(Ref link: https://medium.freecodecamp.org/expose-vs-publish-docker-port-commands-explained-simply-434593dbc9a3)

9/10/2018
Worked with the optional arguments of docker run command such as,
Used option --name to assign a name to the container with an image name.
Used option --rm like the bash command rm it removes the container, but when it exits.
Used option -i short, for -interactive ensures STDIN is kept open even if not attached to the running container
Used option -t that is referenced with -tty , starts an interactive bash shell in the container
Got to know the importance of docker compose which is used to run multiple containers as a single service.
Working with docker exec command and with its options to run a command in an existing container.
(Ref: https://medium.com/the-code-review/docker-run-vs-exec-deep-dive-into-their-differences-19a1041735a3)

10/10/2018
Working with the scenario DOCKER NGINX WEB SERVER - FILE SHARING/COPYING & DOCKERFILE  
Searched for and pulled the Nginx official image from Docker Hub.
Created an instance of Nginx in a Docker container by using the default configuration.
Verified that the container was created and is running or not and also checked the port mappings using docker command.
Verified whether Nginx is running by making an HTTP request to the port 32768 in the browser by issuing docker host IP.
Nginx web server is successfully installed and container is up and running as the welcome page of ngnix was displayed.

11/10/2018
--exposing the port on the nginx server which is port 80 to the port 8080 on the Docker Host
--you browse to the URL http://dockerhost:8080. This shows that the nginx container is up and running.

11/10/2018 (docker host lo unna directory container lo petali)
Working with Nginx web server further to keep the content and configuration on the Docker Host.
Mounted a local directory on the Docker host to a directory in the container.
Provided a docker run command with option 'ro' to make a change to the files in the local directories on the Docker host are reflected in the container.
Created a html page with the message "Welcome to ngnix - from docker host machine".
Troubleshooting the error 403 forbidden in the ngnix web server while browsed the url using docker host IP and with the mapped port.

12/10/2018
Resolving the error 403 by using the below steps in the ngnix web server to view the welcome page when its url is browsed
Copied the content and configuration files from a local directory on the Docker host when created the container.
Created a Dockerfile from the base image i.e., Nginx image which is pulled from the Docker Hub. 
Used docker build command to generate the docker image from the Dockerfile.
Verifying the Dockerfile which is pulled from the docker hub as docker image is not build from the docker file.

15/10/2018
Troubleshooting the issue that the docker image is not built from the docker file when pulled it from the docker hub.
Created new directories from dockerfile using docker command RUN instruction to cope up with the above issue.
Also copied the files from one directory to the other directory using the following docker instructions,
Wrote a docker file using WORKDIR instruction to create sub directories within a directory.
Also used the docker instruction COPY and wrote a docker file to copy the content of file from one directory to the other.
Worked with the docker instuction ADD to copy a single file to the docker image.

16/10/2018
Done the documentation on the scenario to show the steps for setting up the Nginx web sever on Docker.
Prerequisites required to know about the scenario like what is a web server, web server on hardware and software?
A brief explanation on the creation of static and dynamic web servers with an example diagram how request is sent and received the response from the http server.
How to pull the latest nginx image from docker hub and how the default ports that are mapped for the nginx server on docker host.
How to verify that Nginx is running by making an HTTP request to the dynamically mapped port 32768 using docker host to view the default Nginx welcome page.

17/10/2018
Working with the scenario for creating and running a new instance of nginx also changing the default content in the html file.
Created an nginx web server instance and bound it with the port 80 in docker host.
Verified nginx web server for its default content present in the index.html file.
Created a new html index file in my computer / host in local path with required content.
Stopped the running container and attached the local directory that is created in the host to the nginx container.
Again ran a new instance of nginx web server to create other container with modified configuration.
Opened the browser and provided the details of docker host and port to check the content of newly created html file.

18/10/2018
When browsed to view the modified content in Nginx web server, it responded with 403 when the files are mounted.
Troubleshooted the above mentioned issue in the following ways,
Mounted the directory where the container is prsent and its contents publicly readable.
Checked the permissions from inside the container as it shows correct permissions and changed them.
Used curl for getting or sending files using URL syntax which is a ommand line tool.

19/10/2018
I have used curl for sending files from command line but showing the below issue,
curl: (7) Failed connect to localhost:80; Connection refused
Re-installed the curl tool on centos, unarchieved the zip file in appropriate directory structure and checked for the version, tool worked fine.
Again tried connecting to docker using curl, then connected to the localhost of docker after starting up the container and displalyed the content from html file.
Now I have changed the content in the html file and mounted files from local system to the docker's host machine and now connected to the docker using curl, static data is displayed instead of modified data.
Troubleshooting the above issue inorder to display the required data from the html file after connecting to docker using curl.

22/10/2018
Mounted the files successfully from local system to the docker host machine in the process of hosting a simple web page into the ngnix container.
The nginx web server has received and understood the request, but unable to take the further action as 403 is a http status code that has been occurred on the browser.
Resolving it by correcting the configuration file that specifies to load the correct index file where nginx server looks for.
Configured the permissions of each directory at nginx location to 755 by using the respective commands.
Also configured the permissions of all files inside the directory of nginx folder to 644 by using the respective commands.

23/10/2018
Created and ran an nginx instance in docker container using interactive session with bash shell.
Done working with the scenario copying files from host machine to the docker container's file system.
Used docker cp command to serve for copying files and folders between Docker container and a host machine.
Also worked with the scenario for copying files from a docker container to the local filesystem or host machine.
Completed the documentation work on both the scenarios file copy between docker container and host machine & vice versa.

24/10/2018
Done working with a scenario to deploy static website as a container and run Static Website Using Docker by,   
Creating two files index.html file which has a static content and a dockerfile in the newly created directory.
Creating a dockerfile from a base image nginx to change the location of html file from localfilesytem to the nginx web server directory.
Built a docker image from the dockerfile with the name “static-app” and also tag name “v1” using docker build command.
Ran the container by issuing the port number and the image name in detached mode and verified the containers list and checked docker images list.
Open the browser and provide the details of docker host IP and the port that is assigned to the nginx container and the static content is displayed on the browser.

25/10/2018
Verified the logs of the docker by providing respective container name.
Done documentation on the scenario on how to deploy static website as a container and run the website using Docker.
Steps for creating two files index.html file and dockerfile in the newly created directory.
Steps for building a docker image from the dockerfile using the base image nginx using docker instructions.
Steps on how to create a new nginx instance by running the container.
Steps on how to view the static content on the browser by providing the docker host IP and the port that is assigned to the nginx container.
Steps to view the log files for the required event that was made on a respective container.

26/10/2018
Got to know about Redis which is an open source, BSD licensed, advanced key-value store also referred to as a data structure server.
Installed docker-compose using yum command and checked for its version after installation.
Pulled a docker image redis from the docker hub and verified in the list of docker images.
Working with the scenario for linking the containers using docker by,
Running a new redis server container "redisserver" by creating a new instance by using the image redis and verified the docker's container list.
Also ran another client container "redisclient1" and linked it with the redisserver container using the flag --link.

29/10/2018
Verified the file /etc/hosts to make sure that the client container is reachable to the linked server container or not and communicate server using alias name.
After linking, confirmed for the connection details by entering the (host) redis server to the client and tested the ability of the redis client to reach the redis server.
Inserted few key-value pairs into the database using SET key value command and stored them in the container redisclient1 which is linked to the redisserver.
Retrieved the data using GET key command, also appended few values to existing values, viewed the length of the string, set the expiry of a key using redis string commands.
Ran another redis client container "redisclient2", same linked it with the redisserver container using the flag --link and verified connection details same as made with "redisclient1"
Retrieved the data from the container redisclient1 and displayed it in the redisclient2 by using redis string commands.
Successfully done linking the containers and made the communication available among them.

30/10/2018
Doing the document work on the scenario linking the containers of redis server and the redis clients.
What is the use of linking containers?
What is redis, how many data types are used in redis and explained one of the data type "strings" which uses redis commands SET and GET.
Steps to search for required image and pull the redis image from the docker hub, verfiy the list of docker images for the redis image.
Steps to launch the server container(redisserver) from the redis image, verify the containers list, also to start the server container.
Steps to run another client container(redisclient) and link it to the redisserver contianer to provide a secure channel via linked containers such that they can communicate to each other.
Steps to notice the container redisserver has got associated with the redis name and steps to print out the environment variables.

31/10/2018
Completed doing document work on the scenario linking the containers of redis server and the redis clients.
Explained how to enter into an existing container and execute the docker commands and how to connect redis client from it.
Explained the steps on how to execute some of the standard redis commands in the client1(redisclient1) container.
Explained the steps on how to create the redis client container (redisclient2) in a different terminal by linking it to the server container.
Steps to connect to the redis server via alias name that is specified given in the --link flag while launching the container.
Steps to retrieve the data in the current client container (redisclient2) from the first client container (redisclient1) that is stored in string key / value pair format.

1/11/2018
Working with the scenario regarding volumes to persist(save)the data and also to share the data between containers.
For this scenario, I have pulled the docker image ubuntu from the docker hub account.
Created a volume in the container(container1) such that I would be able to access it from the required container.
Ran a new docker container and created a new directory /myvolume in /var folder of ubuntu.
Used -v flag while creating the container which is needed for mapping the containers on the host machine.
Created a volume in the container(container1) and entered into the container also created a new file with some content in the newly created volume.
(Ref: https://www.youtube.com/watch?v=qwXinzD-TGU)

2/11/2018
Opened a new terminal and created a volume in a new container(named container2) and ran it without exiting the old terminal.
Navigated to the location where volume is created /var/myvolume in ubuntu, listed for the files and there displayed the file which is created in the first container(container1).
Verifying whether the file is shared from container's1 volume to the container's2 volume or not by opening the file and checked for the content. 
We can see the same file with the same content opened in the container2 same as it is in the container1, again modified the file by adding some content to the same file, saved the data and closed the file.
Moved to the other terminal which is having container1 and once again moved to the same location to verify the reflected data from the container2 for the content whether updated or not.
Used the option --volumes-from with the name of the first container at run time for accessing the volume from one container to the other.
Successfully worked with the scenario by creating the volumes and accessing them in the containers also by sharing the data between the containers.
(Ref: https://www.youtube.com/watch?v=vocqs5QaUQ0&t=0s&index=27&list=PLea0WJq13cnDsF4MrbNaw3b4jI0GT9yKt)

[Task: 
use -v to map volumes between container and the host machine
share directories or folders or volumes btw containers (for this, create v in one container and access it in another container)]

5/11/2018
Done documentation on the scenario sharing directories/folders/volumes between containers and share data between the containers.
Why volumes came into the existence? What is the use of volumes ? Advantages of volumes and few examples of the volume usage.
Steps for pulling the ubuntu image from the docker hub account. 
Steps to run a container by using the docker image with -v flag to create and map volumes between containers.
Steps to create a new volume and a new file in the volume, opened a new terminal and created a container using the option --volumes-from inorder to share the data from one container to the other container.
Steps on how to open and check the shared volumes and files in the second container, modify the shared file in second container, cross check it in the first container.

6/11/2018
Working with and getting to know about the steps in docker compose workflow.
Steps to define each service in a Dockerfile.
Steps to define the services and their relation to each other in the docker-compose.yml file.
Created two applications app1 and app2 in docker terminal.
Now in the app1, I have created two services, service1 and service2. Created one dockerfile in one service and other dockerfile in another service.
Build the dockerfile in the service1 and troubleshooting the below issue while running an instance from the docker image.
#Error response from daemon: oci runtime error: container_linux.go:247: starting container process caused "exec: \"echo\": executable file not found in $PATH".

(Ref: https://blog.codeship.com/orchestrate-containers-for-development-with-docker-compose/)
(Ref: https://github.com/docker/compose/issues/3530)
(Ref: https://docs.docker.com/compose/gettingstarted/#step-3-define-services-in-a-compose-file)
(Ref: https://docs.docker.com/compose/overview/)
(Issues #https://github.com/docker/compose/issues/3530)

7/11/2018
Resolved the below issue,
#Error response from daemon: oci runtime error: container_linux.go:247: starting container process caused "exec: \"echo\": executable file not found in $PATH".
Created a dockerfile in the second service by using the base image nginx and modified the dockerfile from the first service in application1.
Built both the docker files successfully in their respective services in app1 directory and ran the services by using the base images ubuntu and nginx respectively.
Similarly, created an application and service in it with the dockerfile which uses the base image redis.
Created the docker-compose.yml files with the services in app1 and app2 directories.
Ran the docker command #docker-compose up where the compose is used to start and run the entire application. 

8/11/2018
Working with a sample example to combine the docker containers using docker-compose tool with redis layer which is a data structure storage and web layer, a regular web application.
Installed pip, a powerful tool that helps to manage distribution packages in Python properly .
Used flask, a good python web microframework focuses on the modularity of code base and redis is a key-value datastore used as a database.
Created four files python file, docker file, requirements files which contains the list to be installed and a docker-compose file with yaml script in a new directory composetest.
Used the docker compose up command to start the entire application.
Solved the issue #ERROR: Service 'web' failed to build and troubleshooting the issue #python: can't open the file 'app.py'.

9/11/2018
Troubleshooting the issue #python: can't open the file 'app.py' while trying to combine the web application and a data structure.
Changed the permissions of the python file app.py to make the file executable.
Modified the application "app.py" for the SyntaxError: invalid syntax while calling a function and changed the syntax. (chmod +x test.py     # This is to make file executables)
Verified the error and resolved the issue #IndentationError: unexpected indent by updating the app.py application, debugged and ran the aaplication.
Built the dockerfile successfully which picks up the python image that calls the requirements file to install the flask and redis recursively using option -r.
Also updated the docker compose file by removing the volumes section and not storing the data in the current directory and no back up provided for the containers.

12/11/2018
Troubleshooted the following issues,
#ERROR: yaml.scanner.ScannerError: mapping values are not allowed
While Building service1 #ERROR: Cannot locate specified Dockerfile: Dockerfile
Working with the scenario, linking of containers redis and flask using docker-compose tool to cope up the following warnings,
#1 WARNING overcommit_memory is set to 0! Background save may fail under low memory condition.
#2 WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
#3 WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis.

13/11/2018
Worked successfully with a scenario to build a simple python web application running on docker compose which uses the Flask framework and maintains a hit counter in Redis.
Created a new directory and created a new python file app.py with a get_hit_count function.
Copied the files requirements.txt and Dockerfile from composetest directory, made some changes in the web service of docker-compose file.
Built, ran and started the application by running the docker command #docker-compose up where compose pulls redis image and builds an image for the code, and starts the services that are defined.
Pointed the web browser to the url 'http://localhost:5000' using the port 5000 to find the message and number of hits of the message is displayed in the browser.
Switched to another terminal window, and verified docker images list which should return redis and web and also verified the instances created.

(Ref: https://docs.docker.com/compose/gettingstarted/#step-4-build-and-run-your-app-with-compose
       https://github.com/docker/compose/issues/3530
	   https://tecadmin.net/tutorial/docker/docker-compose-example/
	)

14/11/2018
Doing the documentation work on the scenario to build a simple Python web application running on Docker Compose. 
Explained the overview of docker compose and features of docker compose.
Common use cases where compose can be used in many ways in Development and Automated testing environments.
Steps to install docker compose on a CentOS 7 server and the prerequisites required for Docker Compose relies on Docker Engine.
Illustrated an example regarding the configuration required to run a container with Docker Compose.
Steps to create a new docker compose yml file in a newly created directory to check whether docker compose tool has been installed or not.
Steps to test the docker compose yml file on a CentOS 7 server by executing the docker compose up command also command to check the tool version.

15/11/2018
Doing the documentation work on the scenario to build a simple Python web application running on Docker Compose. 
Steps to get started with Docker Compose real time application by mentioning the prerequisites required.
Steps to define the application dependencies in a new directory like app.py, requirements.txt, dockerfile and a compose file with the services defined in it.
Steps on how to build and run the application with the compose tool and point web browser to the url to check the output of the application.
Steps to switch to another terminal window and verify the list of docker images which should return redis and web.
Steps to verify the  running instances of the application created from redis and web images.
(Ref: https://docs.docker.com/compose/gettingstarted/#step-4-build-and-run-your-app-with-compose)

16/11/2018
Working with the python web application to improve the functionality of the application by adding extra features.
Ran the application's services in the background in detached mode with docker-compose up and use docker-compose ps to see what is currently running.
Stopped the app by running docker-compose down from the project directory within a new terminal and used other method by hitting CTRL+C in the original terminal the app is started.
Edited the docker-compose.yml in project directory by adding a bind mount for the web service to modify the code on the fly, without rebuilding the image.
Troubleshooting the runtime error that the application file is not found and service cannot start as permission denied.

19/11/2018
Started the application with compose in the background and used the command #docker-compose stop to stop the services once it has been finished.
Done documentation on how to use the docker command #docker-compose down to stop the application from the project directory in the second terminal.
Trying to start the application by creating the volume separately instead of providing it in the docker-compose.yml file by executing into the container.
Re-built the application once again with some modifications done in python file app.py and the docker-compose.yml file.
Again ran the application after making few changes with the #docker-compose up command, verifying it as the modifications were not reflected to the application.

20/11/2018
Created the instances of web and redis, ran the two containers as a single service successfully.
Modified the application by creating volumes in the container but the changes are not reflected, verifying it by running the application using docker-compose up command.
Also getting started to work with another application to set up and run a Rails/PostgreSQL app using docker compose in parallel.
Developing the application by keeping the code inside the image which builds a container with Ruby, Bundler and all the dependencies inside it.
Getting to know about the gem file and ruby as I would like to use them while developing the application.

(ref link: https://tosbourn.com/what-is-the-gemfile/)
(ref link: 
gem -> collection of ruby code
gemfile -> is a file we create which is used for describing gem dependencies for Ruby programs.  
bundler -> The bundler is the program which reads the Gemfile and downloads the Gems. We can install the bundler by running:

26/11/2018
Gone through the tutorials regarding ruby, gem file, gem and gemfile.lock, bundler and got to know about them as they are often used in ruby community.
How does the gem file looks like where it requires at least one source which tells where to download the Gems. 
What is the bundler and how do we use the bundler which is a program that reads the Gemfile and downloads the Gems.
Created a dockerfile to put the application code inside an image to built a container with Ruby.

29/11/2018
Created a new directory and then created a bootstrap Gemfile in it which loads Rails.
Also created an empty Gemfile.lock to build the Dockerfile in the new folder already created.
Defined the services in the docker-compose.yml file describing the docker image and the web app built from the current directory.
Built the image using `docker-compose build. (or `docker-compose up --build`)
Generated the Rails skeleton app using the docker command #docker-compose run.

30/11/2018
Built the image for the web service using the Dockerfile using compose and then it ran rails new inside newly created container, using that image. 
When trying to start the container, it is not able to start yet. Then I have deleted the images and once again built the same image.
And then built the image using the docker command and restarted the application by issuing the docker-compose up command.
A temporary directory has been created in the current directory where the app is built and a db directory is created in tmp directory after the image is built and by running the instance from the image.

3/12/2018
Changed the ownership of the files to the user for the container which is running as a root user.
Built the image again as the gem file as it is modified using docker-compose build command.
Created database.yml file to connect to the database and boot the app with docker-compose up command.
Trouble shooting the following issues,
db_1   | chown: cannot read directory '/var/lib/postgresql/data': Permission denied
railapp_db_1 exited with code 1
web_1  | Could not locate Gemfile or .bundle/ directory

4/12/2018
Resolving the issues by performing the following actions,
Reinstalled docker and docker-compose and set everything up from scratch.
Got the volume to work by giving the directory the docker group and allowing docker permission to modify the directory.
Created a dockerfile to Install PostgreSQL on Docker to create a docker image using the dockerfile
Issued #gnupg, gnupg2 and gnupg1 do not seem to be installed, but one of them is required for this operation when built an image from the Dockerfile while assigned it with a name.

5/12/2018
Made a setup once again to run a Rails/PostgreSQL app by creating the files dockerfile, docker-compose.yml, gemfile and gemfile.lock
Installed 41 gems and Bundled gems are installed into `/usr/local/bundle' while creating the instance using the dockerfile.
Used the docker-compose run command to generate the Rails skeleton app again but the project was not built due to the following issue
Permission denied @ rb_sysopen - /myapp/README.md (Errno::EACCES), troubleshooting the issue.
Issue in locating the path, so dealing in tracing the path /usr/local/bundle/bin/rails.

6/12/2018
Troubleshooting the permission denied issue in the /myapp directory README.md file
Meanwhile tested whether PostgreSQL is working or not, tried to install PostgreSQL by creating the image through the dockerfile.
Also working with the other application to compose Django and postgreSQL and getting to know about Django.
Created an empty project directory and created a new file called Dockerfile in the project directory.
Created a file called docker-compose.yml in the project directory describes the services web server and database that make the app. 

10/12/2018
Working with the application to use Docker Compose to set up and run a simple Django/PostgreSQL app.
Got to know about Psycopg which is a PostgreSQL database adapter for Python.
Created requirements.txt file in the project directory with the required software in the file.
Changed to the root of the project directory created the Django project by running the docker-compose run command in a container by using the web service’s image and configuration.
Trying to find out the suitable configuration file in the directory when ran the docker-compose run command.

11/12/2018
Connected to the database for django set up by creating settings.py file in the newly created directory
As running Docker on Linux, the files in the container runs as the root user so changed the ownership of the new files.
Resolved the issue# changing permissions of ‘composeexample’: Operation not permitted.
Ran the docker-compose up command from the top level directory of the project.
Troubleshooting the issue #can't open file 'manage.py': Permission denied

12/12/2018
Testing django to use a database to build a basic Message Board application where users can post and read short messages. 
Exploring Django’s built-in admin interface which provides a visual way to make changes to the data.
Got to know that Django provides built-in support for several types of database backends with just a few lines in our settings.py file it can support PostgreSQL, MySQL, Oracle, or SQLite.
Created a new directory for the code on the Desktop and navigated to the directory.
Creating a new app in the newly created project, also modyfing the settings.py file by adding the new app in it.

13/12/2018
Getting to know about pipenv, which is a Python Dev Workflow for Humans.
Setting up the basic Django dev environment for working with the django projects which is a web framework.
Checked the python version by running the command #python -V as unix environments come pre-installed with Python. 
Ran the command to install pip #easy_install pip is a python package manager, to make the installation easier and upgrade Python packages.
Also verified for the version control, we’ll be using git. Checked for the current version using the command #git --version
(https://realpython.com/django-setup/#python)

14/12/2018
Working with the django project, installing the required softwares for the project on centos7.
As SQLite comes pre-installed with Python, have utilized MySQL instead of SQLite.
Installing MySQL from the community repository. For this,
>Downloaded the repository
>Added the repository
>And resolving the issues while updating the repository
Also trobleshooting the issue that there was a problem importing one of the Python modules required to run yum.

17/12/2018
Updating the python version to the latest version by the following steps:
Found the list of python 2 binaries available on the system by running as root
Issued the command #find / -type f -executable -name 'python2*'
Got the output looked like /usr/bin/python2.7, then ran /usr/bin/python2.7
Now python prompt is opened, in that ran >> import yum
Troubleshooting the attribute error: 'module' object has no attribute' when ran the above command
(https://danieleriksson.net/2017/02/08/how-to-install-latest-python-on-centos/
https://stackoverflow.com/questions/23589971/yum-not-working)

18/12/2018
Found what is the path that yum is using to run python by issuing the command #cat `which yum` | head -1
Probably the output as #!/usr/bin/python and ran the command as a root user, ln -s /usr/bin/python2.x /usr/bin/python to replace the python2.x with the latest version.
Downloading and installing python3 in CentOS via source code. For this,
Downloaded main source code from the python.org website and extracted the archive file.
Issued the following commands to compile and to install Python
./configure --prefix=/usr/local --enable-shared LDFLAGS="-Wl,-rpath /usr/local/lib"
make && make altinstall

19/12/2018
Uninstalled the python package and installed it again by issuing the commands for downloading, compiling and installing.
Ran ./configure --enable-optimizations to release build with all stable optimizations active.
Troubleshooting with the following issues in the process of working with the django project,
> Update for yum
> Update for python to its latest version

20/12/2018
Issued the command #make && make altinstall to update the python to its latest version
zipimport.ZipImportError: can't decompress data; zlib not available
make: *** [altinstall] Error 1
Troubleshooting the above error by issuing the below commands,
As I'm on CentOs, I installed zlib-dev #yum install zlib-devel.x86_64
Now, made clean and installed zlib1g-dev and changed the configuration step:
./configure --with-zlib=/usr/include

21/12/2018
Working with the issue yum update not working in the centos7
Performed the below steps:
>yum clean all 
>yum clean metadata
>Checked the files in /etc/yum.repos.d whether the file contains enable = 0
>Modified all the files and made sure that all the files doesn't have enabled = 0 for each repo (also they are more than one per file).

2/1/2019
Working with the scenario Continuous Integration for IBM Integration Bus to Build, Deploy, Test, Code Coverage and Code Review.
Going through the tutorials on continuous integrating IIB with jenkins.
Got to know the architecture of Automated build and deploy - IBM IIB 
Also getting to know about the Jenkins, GitHub, ANT and IBM Integration Bus Continuous Integration Life Cycle
Verifying the required prerequisites are IBM Integration toolkit, Jenkins, GitRepository, Apache JMeter, Sonarqube

3/1/2019
Getting with the Typical Flow of Jenkins Build Job CI with Jenkins and IIB and different components involved in building a job like,
Ant scripts and jenkins for auto build and deployment of the code components
Apache JMeter to test plan and test case configuration and execution
Code coverage for coverage analysis and Code review used to	do the automated review	of the code
Reporting to send the reports to the developers (open source).

4/1/2019
Upgraded the jenkins version to the version i.e., Jenkins 2.150.1
Working with the scenario SonarQube Integration with Jenkins for Code analysis
Got to know about the use of SonarQube which is used for continuous code quality and continuous inspection.
Troubleshooting the below issue after the jenkins upgrade,
Jenkins root URL is empty but is required for the proper operation of Jenkins features like email notifications, PR status update, environment variables such as BUILD_URL.

7/1/2019
To integrate sonarqube with jenkins for analysing the code done with the following steps,
I have logged into the jenkins account by providing respective credentials.
Then I have searched for sonarqube plugin in jenkins dashboard by clicking manage jenkins and then manage plugins
In the availble tab, filtered for the sonarqube plugin and installed it.
Troubleshooting the configuration for sonarqube servers as unable to find its default properties.

8/1/2019
Successfully installed the plugin sonarqube scanner in the jenkins dashboard.
Getting to know whether the plugins sonarqube and sonarqube scanner are same or not.
Resolving the following issue for the default properties in,
Verifying the configuration for sonarqube servers and their properties for environment variables.
Enabled the checkbox for injecting SonarQube server configuration as build environment variables.	
Configuring the job administrators to inject the SonarQube server configuration as environment variables in the build.

9/1/2019
Searched for and verifying the plugin that is apt for analysing the code.
Updated the java version to get the required plugins in the jenkins dashboard.
The sonarqube scanner plugin is available in the dashboard after updating the java to the latest version.
Troubleshooting the configuration settings for the sonarqube server.
Also working with the plugins and downloading them in different ways to get them into the jenkins console.

10/1/2019
Dowloaded the plugin from the web site and uploaded it in the jenkins dashboard,
>By navigating to manage jenkins
>And then navigated to the manage plugins
>Moved to the Advanced tab and uploaded the downloaded plugin file.
>Verifying for the plugin and its configurations.

11/1/2019
Installed the plugin but the properties in the configuration system are not manual - (SonarQube Scanner for Jenkins 2.8.1)
Configured the global settings and paths by enabling the following properties of SonarQube server as build environment variables
Name of the sonarqube server
Server url and
Aunthentication token
Saved the above configuration and then the authentication token is automatically generated in its field.
Verifying for the authentication token and the process it has been generated.

14/1/2019
Plugin centralized the configuration of SonarQube server connection details in Jenkins global configuration.
Working with the following,
To trigger SonarQube analysis from Jenkins using standard Jenkins Build Steps to trigger analysis with:
SonarQube Scanner
SonarQube Scanner for Maven
(SonarQube Scanner for Mave)
SonarScanner for MSBuild

(https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Jenkins)

15/1/2019
Working with the scenario to trigger sonarqube for code analysis using the sonarqube scanner plugin from jenkins after installing the plugin.
Created a free style project by providing the job details i.e., name of the job that is apt to the scenario.
Provided the following details in the Source Code Management tab telling Jenkins to get the source code from git,
Repository URL and
Git credentials 
Adding a build step for executing sonarqube scanner to check whether the build job will fail if the code does not compile or if any of the unit tests fail.

16/1/2019
Modified the configurations of sonarqube server url which is the mandatory while integrating it to jenkins.
Creating a configuration file in the root directory of the project: sonar-project.properties which should have
Must have a unique projectKey in a given SonarQube instance
Also should contain the following
> Project Name
> Project Version
> Source of the sonar project 
(https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner)

17/1/2019
Configured the global tool configuration by configuring tools and locations with the sonarqube scanner details.
Provided all the bulid properties to execute the sonarqube scanner.
Applied all the changes and the configurations done for sonar project in the jenkins dashboard.
Navigated to the project dashboard and the built the project.
Troubleshooting the ERROR: Error fetching remote repo 'origin'

18/1/2019
Resolving the issue Error fetching remote repo 'origin' by updating the following,
Provided the path to project properties
Modified path to the source directory
Updated the git repository url 
Applied and saved such that the changes would effect and built the project.
Troubleshooting the issue "unable to access the path error setting certificate verify locations.

1234%abcdZ

21/1/2019
Going throught the tutorials and getting to know about the following,
>Jenkins Pipeline
>Jenkins File
>Use Jenkins Pipeline
Installed the plugin build pipeline to create pipeline jobs and verified whether is installed or not in the jenkins dashboard.
Configuring a new pipeline job using build pipeline plugin and building it.



Reference links:
(https://www.youtube.com/watch?v=DTRfG_gMLeU)

22/1/2019
Firstly, working with the basic set up that is to delivery pipeline in jenkins.
Created sample jobs in jenkins by selecting the type of jobs in the dashboard.
Chaining the required jobs that are created in sequence.
Configured the jobs by adding the upstream or downstream jobs based on the requirement.
Also configured the jobs by adding build step Execute shell and provided the commands.
(https://www.youtube.com/watch?v=ndLbn24OwQg - jenkins beginner tutorial)

Verifying the built jobs whether working fine or not.
Builded the jobs but the build was failed due to following issues,

23/1/2019
Built the jobs and the build was failed, verfying the console output.
Troubleshooting the following issues,
>The system cannot find the file specified and the command execution failed
>Build step 'Execute shell' marked build as failure
Resolved the issue by changing the build step to Executing windows batch command.
Configured the jobs in a way to build after other projects are built inorder to maintain a sequence and form a chain.
(Triggered the job only if build is stable)

24/1/2019
Installed the delivery pipeline plugin to visualize Delivery Pipelines i.e., Jobs with upstream/downstream dependencies.
Added delivery pipeline view in jenkins and configuring the view.
Provided the name of the component and the initial job name in pipeline section.
Viewed the jobs present in the pipeline graphically and modified the settings by enabling the build, rebuilding the jobs, total time taken for the build, changed themes.
Run and validated the jobs in the pipeline once again to see the effected changes after editing the settings.
(ref: https://www.youtube.com/watch?v=ndLbn24OwQg)

25/1/2019(https://www.guru99.com/jenkins-pipeline-tutorial.html)
Doing the documentation on the following,
What is jenkins pipeline
What is continuous delivery pipeline
Working of continuous delivery pipeline
Use of jenkins pipeline and different terms used in the pipeline concepts.

28/1/2019
Doing the documentation on the scenario to setup the delivery pipeline
Steps to install the delivery pipeline plugin 
Explanation about delivery pipeline plugin 
Steps to create the sample jobs of free style project type and configuring each job in the build environment
Steps to run all the jobs and to test them working fine or not by verifying the conole output.
 
30/1/2019
Working on the documentation regarding the scenario setting up the delivery pipeline
Steps to add upstream jobs for the SampleDeployJob
Steps to add upstream jobs for the SampleTestJob
Steps to create the sequence by chaining the required jobs
Steps to run the sequnce of jobs and trigger the dependent jobs one after other.

31/1/2019
Working with the steps for documenting the steps for setting up the delivery pipeline
Steps to add delivery pipeline view in jenkins.
Steps to configure the view in jenkins.
Steps to create a new view in jenkins dashboard.
Steps to edit the view if it is already created in jenkins dashboard.

Continuous Delivery pipelines, perfect for visualization on information radiators. Shows one or more delivery pipeline instances, based on traditional Jenkins jobs with upstream/downstream dependencies.



[Created a new item MyFirstPipeline and selected the type of project it is from the jenkins dashboard.
Getting to know how to configure jenkins in two different ways 
>Scripted pipeline
>Declarative pipeline]



7731085560
Avinash@18

6302039923
Sumani



https://www.youtube.com/watch?v=Ihh3K00hV_k  ---> maven project


#Required metadata
Sonar.ProjectKey=Nimbu
Sonar.ProjectName=Name
Sonar.ProjectVersion=1.0

#Path to source directory
Sonar.Sources=/var/lib/jenkins/workspace/$JOB_NAME/Nimbu/src

scenario:
---------
https://dzone.com/articles/code-analysis-part-2-analyzing-code-with-sonarqube - sonarqube with docker
Develop your pipeline as code
Build job pipeline in freestyle
nd try to make pipeline
sonar qube analysis maven based projects 


amanpreetsingh0405


running process of docker




Configuring sonarqube on jenkins - https://www.youtube.com/watch?v=wukVEPa4d38

SonarQube Integration with Jenkins for Code analysis - https://www.youtube.com/watch?v=jh7utASgKj4
jenkins with iib 
multi job pipieline - https://www.youtube.com/watch?v=UVYJCYo8tC0 (self learning)
kubernetes




(link: https://unix.stackexchange.com/questions/298110/centos-7-yum-install-not-working
yum not working )

devops - edureka




 
Ran python program app.py 
{docker compose build
docker compose up
run python program
Use docker-compose up to start the system.}
Zabcd@1234
File "app.py", line 11
web_1    |     app.run(host="172.17.0.1",debug=True)
web_1    |     ^
web_1    | IndentationError: unexpected indent            > changed the host ip








Linking a container ref links:
https://www.youtube.com/watch?v=zxsX-toqO5k
https://www.youtube.com/watch?v=uSfW17zs35k



do doc properly https://www.youtube.com/watch?v=4PvlcTtaAhw
(scenario (or) hosting a simple web page into the ngnix container.)
sss
docker tasks 
-------------
docker compose
docker with jenkins > docker tutorial
docker rails > https://jee-appy.blogspot.com/2017/01/running-rails-application-with-docker.html
what is detached mode in docker ?
connecting docker with curl
https://hackernoon.com/docker-tutorial-getting-started-with-python-redis-and-nginx-81a9d740d091


"403" is actually an HTTP status code that means that the web server has received and understood your request, but that it cannot take any further action.


curl -H 'Host: project1.loc' http://127.0.0.1/something
curl -H 'Host: /var/www/html/' http://172.17.0.1:80

docker run --name hostfile -p 8080:80 -v /docfiles/Nginx:/usr/share/nginx/html:ro –d nginx 
http://dockerhost:8080/hw.html
http://172.17.0.1:8080/index.html
When i tried to write host a file in nginx server i am getting 403 forbidden message how to solve it

docker run -p 8080:80 -v /docfiles/Nginx:/usr/share/nginx/html:ro -d nginx 

curl -X HEAD -I http://172.17.0.1:8080

reloded nginx server
Directory index is not properly defined (https://nginxlibrary.com/403-forbidden-error/)
accessing directory structure properly
check Ref: https://www.1and1.com/cloud-community/learn/web-server/nginx/solve-an-nginx-403-forbidden-error/


(Ref: https://www.tutorialspoint.com/docker/docker_setting_nginx.htm > to create a sample html page and host it in the docker)
(Ref: https://www.digitalocean.com/community/tutorials/how-to-run-nginx-in-a-docker-container-on-ubuntu-14-04 > continue the task)
(Ref: https://stackoverflow.com/questions/23439126/how-to-mount-a-host-directory-in-a-docker-container > mounting a directory)
(Ref: https://stackoverflow.com/questions/31640660/how-to-use-dockers-copy-add-instructions-to-copy-a-single-file-to-an-image > use copy /add instructions)
(Ref: https://gadelkareem.com/2012/02/27/upgrade-curl-7-24-on-centos-6-2/ > curl installation)


Work with the following:
------------------------
copy vs add (go)
doc on what is nginx wiki and features and diff btw ngnix and apache server
how an nginx image is pulled and run the container from docker hub
copy files from one directory to the other from docker file using docker instructions
(Ref: https://unix.stackexchange.com/questions/409876/what-is-the-purpose-of-the-volume-instruction-in-a-dockerfile) mount using volume instruction
https://unix.stackexchange.com/questions/409876/what-is-the-purpose-of-the-volume-instruction-in-a-dockerfile - purpose of volume instruction in dockerfile
https://unix.stackexchange.com/questions/3192/what-is-meant-by-mounting-a-device-in-linux > mounting in linux
use of env variables


Have created a container using the docker image by running the docker run command.
to mount a host directory into a Docker container so that any updates done on the host is reflected into the Docker containers.(nginx copy content)

Solve iib error in toolkit and console  > set environment variables for java path
how and where to set the java path in env variables for iib installation??????


(Ref: https://www.bogotobogo.com/DevOps/Docker/Docker_Nginx_WebServer.php
https://hub.docker.com/_/nginx/)

12949
12899 50 tax
12438 - 461 rps per day
 



	
docker tasks: https://www.bogotobogo.com/DevOps/Docker/Docker_Container_vs_Virtual_Machine.php
Start the ubuntu container using its id and the enter to it using docker exec -it id bash
(ref: https://www.youtube.com/watch?v=fdQ7MmQNTa0)

check or work with:
https://www.youtube.com/watch?v=wtImJTte-9E - ibm mq on docker
rename the repo name and tag name for an existing image
rmove tag name withut rmvng image
how to save multiple docker files in same dirctory
dockerfile to run and chk it in browser-https://www.learnitguide.net/2018/06/write-dockerfile-to-build-own-images.html

FROM instruction used to specify the valid docker image name.
MAINTAINER instruction specifies about the author who creates the new docker image for the support.
--LABEL instruction used to specify metadata informations to an image which is a key-value pair.
--EXPOSE instruction informs about the network ports that the container listens on runtime
COPY instruction copy files, directories and remote URL files to the destination within the filesystem of the Docker Images. 
RUN instruction used to execute any commands on top of the current image which will create a new layer
CMD instruction sets a command to be executed when running a container. 
--VOLUME instruction is used to create or mount a volume to the docker container from the docker host filesystem.
--USER instruction sets the username,group name, UID and GID for running subsequent commands. 
WORKDIR instruction sets the working directory.
ENV instruction sets environment variables with key and value.
--ONBUILD instruction specifies a command that runs when the image in the Dockerfile is used as a base image for another image.
How does the comments are mentioned in the docker file with an example



---------------------------------------------------
docker tasks:

git hooks
docker hooks
docker file
docker file best practices
iib on docker
mq on docker
docker file > git hub repo > jenkins
pull jenkins in docker
diff btw arg and env (ref: https://www.learnitguide.net/2018/06/dockerfile-explained-with-examples.html)
diff btw entry point and cmd(https://www.learnitguide.net/2018/06/dockerfile-explained-with-examples.html)
add instruction
docker tutorial -> build a sample image
MQ Performance in a Docker container > https://developer.ibm.com/messaging/2017/10/19/mq-performance-docker/
https://www.youtube.com/watch?v=YT3b8mJhp8o > docker instructions (cmd,entrypoint)

Reference: docker tutorial

------------------------------------------------------------
Docker links:
https://www.learnitguide.net/2018/02/what-is-container-what-is-docker.html > containers
https://www.learnitguide.net/2018/04/what-is-docker-get-started-from-basics.html > docker
https://docs.docker.com/machine/overview/ > docker machine

---------------------------------------------------------------------------------------------------------------
Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags and branches: 
git log --graph --oneline --decorate --all
See only which files have changed: 
git log --name-status
git log --graph
gist log --oneline --graph

log graphing: 
============

https://zwischenzugs.com/2016/06/04/power-git-log-graphing/  > 1/8
https://gist.github.com/datagrok/4221767 - git log graphing    ||
https://zwischenzugs.com/2016/06/04/power-git-log-graphing/    ||

https://stackoverflow.com/questions/35780773/how-to-get-git-log-name-status-to-work-with-merge-commits
https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs

---------------------------------------------------------------------------------------------------------------



about git log url > https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History(patch)
cherry pick abort continue > file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-cherry-pick.html
https://www.quora.com/What-is-the-difference-between-the-reset-and-revert-commands-in-the-Git-version-control-system
ref: file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-reset.html
ref1: https://stackoverflow.com/questions/2530060/can-you-explain-what-git-reset-does-in-plain-english

---------------
git gui
reset vs revert
git reset --keep
git rebase --abort,
git rebase --continue,
git rebase --skip,
git rebase --quit,
rebase exec
git cherry pick
patch
git tutorial
reflog
------------------------------------------------------------------------------------------------------------

tasks: 
https://help.github.com/enterprise/2.13/user/articles/changing-a-commit-message/
https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning
https://www.youtube.com/watch?v=FyAAIHHClqI
https://www.git-tower.com/learn/git/ebook/en/command-line/branching-merging/stashing > when to stash
https://git-scm.com/book/en/v1/Git-Tools-Stashing > stashing
https://git-scm.com/book/en/v2/Git-Branching-Rebasing > rebasing
https://orga.cat/posts/most-useful-git-commands > all git cmnds
https://www.youtube.com/watch?v=jza3xtBVjMc > git reset and git revert
https://www.youtube.com/watch?v=ErJyWO8TGoM > .gitignore
https://gettinggit.com/learn > all the concepts category wise
https://www.atlassian.com/git/tutorials > git tutorial
https://www.youtube.com/watch?v=xuB1Id2Wxak > git&github video
http://rogerdudler.github.io/git-guide/ > not indepth
file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-reset.html

Ctrl + Ins (to copy the content from the terminal)
Shift + Ins (to paste the content from the terminal)
-----------------------------------------------------------------------------------------------------------------------

NOTES:
git clean -f will remove untracked files,meaning they're gone for good since they aren't stored in the repository.
Make sure you really want to remove all untracked files before doing this.
git reset --hard will not remove untracked files, 
where as git-clean will remove any files from the tracked root directory that are not under Git tracking.
git log --pretty-oneline
git log --pretty-oneline | grep NewB > will get all the commits of NewB branch

------------------------------------------------------------------------------------------------------------------------------------
scenarios:

diff btw reset n revert, chckout n reset, head n head~2(diagramatically)
need to work with "git exec rebase command "
exec,onto,nooff,todolist
rebase indepth > https://wilsonmar.github.io/git-rebase/
git reflog > https://www.atlassian.com/git/tutorials/rewriting-history
git reflog --relative-date
git bisect
git reset --soft 
git reset --hard
git reset --mixed
patch
git reset --hard HEAD
How to create a branch from previous commit in git
Creating a Branch from a Stash
Creating a Branch from a Stash
diff tool
Going through the git diff tutorial.
git stash unapply - git stash show -p 
git diff
.gitignore
nxt scenario -> https://www.atlassian.com/git/tutorials/saving-changes/git-stash
git commit --amend > command to change the commit message if not pushed to remote repo
git reset HEAD s2 -> s2 - filename
git log -- s2
deletd s2 and restore it
about integration
https://www.atlassian.com/git/tutorials/using-branches/git-merge
git merge
how it works
preparing to merge
confirm the receiving branch
fetch latest remote commits --> git fetch
fast forward merge
3-way merge
resolving conflict
how conflicts are presented
rebase -----------------------------------------------------------------------------1 https://superuser.com/questions/751699/is-there-a-way-to-edit-a-commit-message-in-github/751909
rebase vs merging ------------------------------------------------------------------2
stash bfore rebase and merge -------------------------------------------------------3
changing a commit message -> https://help.github.com/enterprise/2.13/user/articles/changing-a-commit-message/
git log -3 --graph -> shows last three commits
git cherry pick
setting private and public repos in github
no need to give git credentials if it is a public repo
git clone https://github.com/doddam/myRepo.git - Clone a remote repository
git clone https://github.com/doddam/myRepo.git . - Clone a remote repository in the current directory

--------------------------------------------------------------------------------------------------------------------------

Summary & note:

Get a repo from somewhere:
clone

Create a repo from scratch:
init

Work in linear fashion on the current branch:
add
commit
mv
rm

Work with branches themselves:
branch
checkout
merge

For working in and with branches:
reset

Get information about things:
log
status
diff
show

For syncing your repo to and from others:
fetch
pull
push

For searching history:
grep

For marking objects, typically commits:
tag

For being cool (most versioners can't even do these):
bisect
rebase



-------------------------------------------------------------------------------------------------------------------

Jenkins:

Context Path (required): /jenkins
XML Configuration file URL:  (:C:/path/to/context.xml)->/data/Tomcat/conf/context.xml
WAR or Directory URL: -> path to context.xml  -> (/path/to/bar.war!/) ->  /home/dmanasa/Desktop/jenkins.
/jenkins
/data/Tomcat/conf
/home/dmanasa/Desktop
https://www.nagios.org/about/overview/ -> nagios working
http://docs.ansible.com/ansible/latest/playbooks_loops.html#standard-loops
Task -> create numb8/er of child branches and integrate to master branch
Task -> Configuring GitHub for Jenkins -> https://valuebound.com/resources/blog/continuous-integration-using-jenkins-and-github-to-automate-deployment
Task -> about git extensions -> https://media.readthedocs.org/pdf/git-extensions-documentation/latest/git-extensions-documentation.pdf
Task -> setup jenkins.war in tomcat and run it 
Task -> Deploying a war file from Jenkins to Tomcat(https://www.packtpub.com/mapt/book/virtualization_and_cloud/9781788471060/5/05lvl1sec34/deploying-a-war-file-from-jenkins-to-tomcat)
link -> http://www.baeldung.com/jenkins-job-schedule
task -> git hub witheclipse
https://wilsonmar.github.io/git-rebase/

Reference: https://www.tutorialspoint.com/jenkins/jenkins_git_setup.htm
https://www.cloudbees.com/blog/using-git-jenkins
In your Jenkins Dashboard (Home screen), click the Manage Jenkins option on the left hand side.
github branches in jenkins
111111111111111111111111111111111
-------------------------------------------------------------------------------------------------------------------


personal:
--------
pb887766@gmail.com

tablets: 
may - 6th
june - 4th

1417178000010632
ifsc - KVBL0001417
108.anilkumar@gmail.com

116+k+s(rng)
108r+116+16rnds(rng)


--------------------------------------------------------------------

ppts on git:
-----------

https://www.quora.com/Where-can-I-learn-Git
https://www.slideshare.net/HubSpot/git-101-git-and-github-for-beginners

fatal: unable to access repository url SSL certificate problem: self signed certificate in certificate chain
error: Could not fetch origin


git config http.sslVerify false
abcd@1234Z
npwd - Zabcd@1234

release management
web server - apache 
appl ser - was,jboss,apache tomcat


wifi pwd
uname-domain name
pwd-Miracle@1


224526 > kv
NewPwd@1 > mss wifi pwd
abcd@1234Z > mailcorp






Business logic (IIB)
--------------------

Simply integrates any dissimilar application/System there are around 100 components which are available in the IIB which are called nodes for 
this purpose

you can route transform enrich data and provide decoupling between your integration system
 and it can act as an integration layer between systems

Christus health care is a non profit organization.

Health Level-7 or HL7 refers to a set of international standards for transfer of clinical and administrative data between software applications used by 
various healthcare providers. These standards focus on the application layer, which is "layer 7" in the OSI model. The HL7 standards are produced by the
Health Level Seven International, an international standards organization, and are adopted by other standards issuing bodies such as American National 
Standards Institute and International Organization for Standardization.

Sends HL7 data (of the patients) from one system to the other system 

Hospitals and other healthcare provider organizations typically have many different computer systems used for everything from billing records to 
patient tracking. All of these systems should communicate with each other (or "interface") when they receive new information, or when they wish to 
retrieve information, but not all do so.

Patient data in the form of HL7 segments.



Develop the Flows in IIB and implement the logic in eSQL Code based on the understanding of Pseudo Code provided.
Configured SVN repository with Message Broker and daily check in and checkout / version control of the source code.
Prepared test cases for the developed message flows.
Basic unit testing of the Integration flows. 

The business perspective of this project is

The health related transactions like patient admission, observation, visiting information, physician allocation and Medical information are manipulated
 in the HL7 messages. 
HL7 messages are international message standards for health care transactions in USA. All the transactions are automated and processed in between the 
systems.

The HL7 message will be transmitted from the source to target systems and vice versa. The sourcesand target applications are Meditech, Midas , 
Mosaiq and Atheena etc. These applications are be configured to process HL7 messages only.

Technically:

IIB/WTX placed in between source and target applications in order to transform, enrich and route the HL7 messages.

We have implemented three flows:

One flow is to get the source message for source application and send the positive/negative acknowledgement back to source system. This flow is named 
as 
Receiver Flow. This flow will get the message from source over tcp/ip protocol.

Second flow is to implement business logic based on specification document and sends the resultant message to third flow. This flow is named as 
transform 
flow

Third flow will get the resultant message from transform flow and sends the message to the target application and gets acknowledgement message from 
target 
system. This flow is named as sender flow.

The business logic will be implemented in esql language. And the communication between receives flow and transform flow is can be get accomplished by 
Publication and subscription.

--------------------

projects:
dev
Christus is a service oriented approach in building integration solutions and to implement Enterprise Service Bus architecture. All the HL7 data coming from source application will also be mapped in Common Information Model (CIM) and as per the transformation needs using eSQL language and route it to destination applications.

migration
CHRISTUS is in the process of upgrading its integration platforms to establish next-Generation of integration capabilities, a service oriented approach in building integration solutions and to implement an Enterprise Service Bus architecture. All the HL7 transactions in the enterprise were taking place through the Cloverleaf. The responsibility was aimed at replacing 625 interfaces running on these Cloverleaf and migrate them to a more robust engine built on MQ Series and IIB technologies. All the HL7 data coming from source application will also be mapped in Common Information Model (CIM) and as per the transformation needs using eSQL language and route it to destination applications.

2nd di tcl use chesi code rasinatlu i mean migration
1st one mapping pecs use chesi development chesinatlu

--------------------------------------------------------------------------------------------------------------


Scenario-1 : create instance of nginx and change the content in the html page in nginx server

how to make a docker conatainer and instantiate an nginx as a container with docker and bind it with the localhost as lookout wevbserver for static html files
Instal docker and pull nginx image
(Assigned port 80 to localhost)
docker run -p 80:80 -d nginx (d > detach mode)
docker with nginx is running and bound to the port 80 on coputer(docker host)
curl localhost (can see the content of index html that running nginx of port 80)





Now I want to change the content of html page
First create html index file in our computer / host in local path
mkdir nginxfiles
cd ||
mkdir html
cd ||
vi hellowrld
hlowrld
<html>
<body>
<h1> hw</>
</body</html
stop the running container
Attach the local directory that is created in the host to the nginx container
docker run -p 80:80 -d -v /root/nginxfiles/html/:/usr/share/nginx/html/ nginx (v > to attch the newly created folder to the web folder of nginx )
now instance is running and listening to the port 80
use curl localhost 
and thus content of the index file of the nginx is changed.
check the web browser of local host



docker run --name changehtmlfile -p 80:80 -d -v /root/nginxfiles/html/:/usr/share/nginx/html/ nginx 
final : docker run --name changehtmlcontent -p 80:80 -d -v /root/docfiles/Nginx/nginxfiles/html/:/usr/share/nginx/html:ro nginx
docker run --name my-nginx-2 \ -v /var/www:/usr/share/nginx/html:ro -P -d nginx
docker run -it --name copyfiles nginx /bin/bash

docker run --name changehtmlcontent \ -v /var/www:/usr/share/nginx/html:ro -p 80:80 -d nginx

Scenario-2: copy other file into the nginx server without stoping the webserver

chmod -R o+rX /var/lib/docker/containers


docker run --rm -it \
           --name my-website \
           -p 9999:80 \
           -v /tmp/webs/my-website:/usr/share/nginx/html \
           nginx:latest

		   
		   jenkins:
		   Install Role-based Authorization strategy plugin
You can view the following options only when you install the plugin
Manage and Assign Roles option in Manage Jenkins &
Role-based Strategy option in Configure Global Security Authorization 


linking the containers
-----------------------
docker images
docker run -d --name redisserver redis 
docker ps 
start the container
docker run -it --name redisclient1 --link redisserver:redis redis sh
cat /etc/hosts
ping redis
clear
redis-cli -h redis     ;h - host
PING (respones PONG)
docker run -it --name redisclient2 --link redisserver:redis redis sh
docker exec -it redisclient1 sh

To save data into database, ran another client redisclient1 and redisclient2
To make sure the container has been linked or not it can be checked by viewing the file /etc/hosts whether it is reachable by the current container
IP Address is viwed and can communicate it with the alias name "redis" 
ping redis
clear
Connect to the redis server through the redis client container
ping > pong
Lets save some data into the client container
set name manasa > key value pairs
append,strlen
Run another client container(client2) by linking to the server container must receive the data from client1 container
(set enter in clint1)
ip adrs can be seen)
diplay environment variables in the client container using set command 
Successfully  linked two client containers using server container and worked together
docker exec -it redisclient1 sh
https://rominirani.com/docker-tutorial-series-part-8-linking-containers-69a4e5bf50fb - ref fr reids sce



comic book
naughty
best wishes


Volumes:
--------
ref: https://container-solutions.com/understanding-volumes-docker/
https://www.youtube.com/watch?v=qwXinzD-TGU --- 1
https://www.youtube.com/watch?v=vocqs5QaUQ0&t=0s&index=27&list=PLea0WJq13cnDsF4MrbNaw3b4jI0GT9yKt --- 2
(The Volumes page is where you create the storage containers for your applications, databases, and file systems. A volume is the logical component created for the host to access storage on the array.)





stop running c1 , files must be accessed in the c2 in other terminal
data containers? mapping the volume from the same host


docker inspect container1 | less
less dockerfile
docker run getmyipaddress
docker run getmyipaddresshttp://ifconfig.me/ua
nano dockerfile


FROM hello-world
CMD ["echo", "hello world!"]
docker build .
docker run --name s1  c441f48c5c0f

FROM ubuntu
CMD ["echo", "hello!"]

FROM nginx
CMD ["echo", "hello!"]

check how docker compose works and how we can combine docker containers with a simple example of redis layer and web layer
data structure storage - redis layer
regular web application  - web layer

The Pip Python Package Manager
Pip, a powerful tool that helps you properly manage distribution packages in Python.

Flask is a good python web microframework which lets you focus only on things you need. There is more focus on the modularity of your code base. Redis is a key-value datastore that can be used as a database.
(Ref: https://www.youtube.com/watch?v=pFFqGfBeOp0)
(Ref: https://flask-and-redis.readthedocs.io/en/latest/)

composetest
https://flask-and-redis.readthedocs.io/en/latest/ - ref
app.py
from flask import Flask
from redis import Redis

app = Flask(__name__)
redis = Redis(host="redis",port=6379)

@app.route('/')
def hello():
  count = redis.incr('hits')
  return 'Hello World! I have been seen {} times.\n'.format(count)

if__name__=="__main__";
  app.run(host="0.0.0.0",debug=True)

Dockerfile
FROM python:3.4-alpine
ADD . /code
WORKDIR /code  
RUN pip install -r requirements.txt
CMD ["python","app.py"]

docker-compose.yml
version: '3'
services:
  web:
     build: .
     ports:
      - "5000:5000"
     volumes:
	  - .:/code
  redis:
    image: "redis:alpine"
	
	
Issue# ERROR: Service 'web' failed to build: ADD requires at least two arguments

    build:
      context: ./service3
    image: service3

networks:
  default:
    driver: bridge

requirements.txt
flask 
redis

Dockerfile


step - 1: pulled redis image
step - 2: building the dockerfile

docker-compose file
--------------------
version: '2'
services:
  service1:
    build:
      context: ./service1
    image: service1
  service2:
    build:
      context: ./service2
    image: service2
networks:
  default:
    driver: bridge
	
	app1 > s1 > df > ubuntu image
	       s2 > df > nginx image
	app2 > s3 > df > redis image
	
	
	
version: '3'
services:
  ubuntu:
    build: .
    ports: 
	 -"8080:8080"
  nginx:
    image "nginx:latest"
      
------------------------------
dc.yml
------
version: '2'
services:
  service1:
    build:
      context: ./service1
    image: service1
  service2:
    build:
      context: ./service2
    image: service2

networks:
  default:
    driver: bridge
------------------------------------


task:
linking docker conatianers using docker compose tool.
redis server
redis client 

changed the settings in vm:
---------------------------
#WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then 
reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
/etc/sysctl.conf
vi sysctl.conf
vm.overcommit_memory=1

#WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
/etc/rc.local
vi rc.local
sysctl -w net.core.somaxconn=65535

/proc/sys/net/core/somaxconn
To fix this warning you have to set a new config to /etc/rc.local so that the setting will persist upon reboot

#WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the 
command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. 
Redis must be restarted after THP is disabled.


WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.

WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then 
reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.

WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the 
command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. 
Redis must be restarted after THP is disabled.

Ran the command in the root
added the line echo never > /sys/kernel/mm/transparent_hugepage/enabled in etc/rc.local/

Pulled redis image and created two instances of redis 
docker run -d --name redis_server redis:latest
docker run -d --name redis_client redis:latest
need to link these two containers using docker compose tool
(ref: https://blog.codeship.com/orchestrate-containers-for-development-with-docker-compose/)



docker exec -it  99757ee11843 /bin/bash
rpc error: code = 2 desc = oci runtime error: exec failed: container_linux.go:247: starting container process caused "exec: \"/bin/bash\": stat /bin/bash: no such file or directory"

about ai
about ml 


jan  (4 days - 1cl)
feb 
mar
apr - 1 cl
may - 1 cl
june - (3 days - 3cls) 
july
aug
sept (4 days - 3cls)
oct
nov (3 days - 2 cls)
dec (4 days - 1 cl)

12 + 8 (extra leaves > bak pain,dental surgery and grandpa)

3 + 1 -> unexpected 

Hi Satyanesh/team,

Please be informed that I am submitting this letter for the purpose of resigning from the post of "Software Developer" at Miracle Software Systems. The effective date of my resignation will be from 7th January 2019.

I would like to thank for giving an opportunity to work for Miracle Software Systems and grow as a professional. Special thanks for the support you have provided me and the opportunities you have given me to enhance my skills.

Thanks again for a wonderful working at Miracle Software Systems.

Thanks & Regards
-------------

30/1 - 30
31/1 - 30
1/2 - 
