10/4/2018
Downloaded jenkins on windows
Started jenkins using command prompt and done with the following command to extract the .war file (java -jar jenkins.war). 
Accessed jenkins through the link −> http://localhost:8080
Jenkins dashboard is opened by providing user name and password
Exploring jenkins dashboard/console
Changed the port from 8080 to 8088 using the command java -jar jenkins.war --httpPort=8088 and accessed jenkins through http://localhost:8088
Troubleshooting the issue regarding plugins as default plugins are not available in the dashboard.

11/4/2018
Working with the scenario: Compiling and running a java file in jenkins on Windows i.e., by integrating Jenkins and GitHub (with the GitHub Jenkins Plugin)
Exploring GitHub repository
Created an account in github -> https://github.com/ and created a new repository
Uploaded some files into repository by browsing the fil path and committed the changes.
Checked the files present in the particular repo whether they are committed or not.
Modified files which are already uploaded in the repo and again committed
Deleted files in the repository by selecting particular file to be deleted and again committed
I have pushed the code into the git repository and committed the changes required, debugging the plugins issue in jenkins and doing documentation parallely.

12/4/2018
Done with a scenario Git Plugin setup in Jenkins
Downloaded the latest Git.exe file for Windows and Installed 
Aaccessing git from windows command prompt without using Github server
Got to know about Git advantages
Working with git commands which are used to set a git repository

13/4/2018
Working with the scenario integrating jenkins and github i.e., Compiling and running a java file in jenkins on Windows
Successfully pushed the code into git repository
But unable to push code from git repository to the jenkins because of the following issue.
  Error occurred due to "SSL certificate problem: self signed certificate in certificate chain"
To check the issue, I have cloned files from the repository to local environment. But again faced the same issue.
Unable to access git, so troubleshooting the above issue.

16/4/2018
Done with the scenario:
Integrating jenkins and github via github plugin; i.e., Compiling and running a java application in jenkins on Windows
Created a job in jenkins
Configured the job with respective details:
 Gave Project details and GitHub url (as my repository is hosted from github)
 Selected Source Code Management (SCM) as Git and provided the respective url
 Next pushed the code; now coming to Build section, opted for add build step 
 Gave the commands required for compiling and running the application by selecting the option Execute Windows batch command.
 Saved and Build the job successfully; Now build history is seen by clicking #1 
 Output is viewed in console output section once job is build successfully.
 
17/4/2018
Doing research and development on pull request and merge request,
Attended KT session on NOC (Network Operations Center) and Nagios,
Done with the issue "SSL certificate problem: self signed certificate in certificate chain",
Tested Jenkins by picking up an appilcation from git repositroy to integrate,
Troubleshooting the issue: Class names, are only accepted if annotation processing is explicitly requested.

18/4/2018
Done with the issue "Class names, are only accepted if annotation processing is explicitly requested",
Tested the scenario again in Jenkins by picking up an appilcation from git repositroy to integrate - worked fine,
Done documnetation on the scenarios: Jenkins - Git Setup & Integrating Jenkins - GitHub
Attended KT session on disk alerts and application alerts
Getting to know about Network Operations Center, its design and managing NOC

19/4/2018
Got to know about 
Booting process in linux
Steps involved in the booting process
Commands to Monitor Swap Space Usage in Linux
Usage of nice and renice commands
Exploring the git gui 
Doing r&d on git on windows

20/4/2018
Attended a meeting on an effective communication,
Got to know about logrotate,
Doing r&d on git extension on windows,
Working with the scenario Jenkins Tomcat setup,
Troubleshooting the issue "FAIL - Application at context path [/jenkins] could not be started".
 
23/4/2018
Done with the issue "FAIL - Application at context path [/jenkins] could not be started",
Configured the following in tomcat web application manager to deploy jenkins.war file,
Context Path 	
XML Configuration file URL	
WAR or Directory URL
Successfully deployed jenkins.war in the tomcat,
Troubleshooting the issue "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists" while accessing the jenkins.

24/4/2018
I have been monitoring mails,
Started the jenkins application from tomcat, message is displayed as "OK - Started application at context path [/jenkins]",
Tried to access jenkins through http://localhost:8080/jenkins/ but facing the issue "HTTP Status 404 – Not Found",
Troubleshooting the above issue,
Meanwhile trying to deploy jenkins.war directly by uploading WAR file without configuring, but unable to do so because the connection to the server was reset while the page was loading.

25/4/2018
Checked the opened ports on the system by using netstat command and its options,
And changed the tomcat port as jenkins and tomcat are running on the same port; some port conflicts occurred,
Stopped the tomcat server
Opened Tomcat_Home/conf/server.xml file to edit 
Looked for the port *8080* in the xml file and replaced with the other available port.
<Connector port="8080" protocol="HTTP/1.1" 
connectionTimeout="20000" 
redirectPort="8443" />
Wrote playbook for deploying jenkins.war in the tomcat,
Successfully deployed jenkins.war in the tomcat,

26/4/2018
Working with the scenario jenkins tomcat setup,
Modifying the playbook jenkins.war,
Working with the ansible modules that enables the port 8080 such that jenkins would run on that port,
Troubleshooting the issues:
Encountered exception [javax.management.RuntimeOperationsException: Exception invoking method check],
403 Access Denied - You are not authorized to view this page
By default the Manager is only accessible from a browser running on the same machine as Tomcat. If you wish to modify this restriction, you'll need to edit the Manager's context.xml file. 

27/4/2018
Done with the scenario jenkins tomcat setup on windows,
Installed tomcat on windows,
Changed the default port of tomcat server in conf/tomcat-users.xml,
Downloaded jenkins.war,
Placed the jenkins.war file in webapps folder,
And successfully deployed jenkins.war application in tomcat web application manager,
Accessed the jenkins application from the tomcat,
Working with the documentation for the scenario jenkins-tomcat setup.

2/5/2018
Done with the documentation jenkins-tomcat setup,
Done with the scenario, jenkins picks up a java application from local system which is placed in the jenkins workplace an then a job is build,
Done document on the above scenario,
Attended KT session on 
LDAP servers,Active Directory,User creation in Physical box and VM.

3/5/2018
Went through the LDAP and AD also Git tutorial sessions,
Installed git on windows and accessed it from git bash,
After building the project (integrating Jenkins and Git) received the above error on the console output section,
" ERROR: Error cloning remote repo 'origin' "
Troubleshooted above issue by performing the below steps:
1. Go to Manage Jenkins  >  Global Tool Configurations 
2. Under Git configuration  >  Git installations 
3. Enter complete path to git executable including git.exe  > Save  > Again build the project
Done with the job jenkins and github integration and built it in other way through global tool configuration.

4/5/2018
Went through the jenkins beginner tutorial regarding:
Scheduling cron jobs in jenkins and 
About the build trigger configuration with options build periodically and Poll SCM ,
Done with a scenario Jenkins integration with GIT - SCM successfully,
Configured Poll SCM in build triggers by scheduling cron job,
Working with the documentation.

7/5/2018
Done with the documentation on the scenario - Jenkins integration with GIT - SCM,
Done with a scenario - scheduling a job in jenkins by using the option build periodically in build trigger section,
Scheduled job in jenkins by using cron compliant format,
Completed documentation regarding the scenario.

8/5/2018
Made some modifications in the documentation on the scenario - Jenkins integration with GIT - SCM,
Gone through Git and GitHub Beginner Tutorial on Branching and Merging concept,
Got to know about few commands those are required for Branching and Merging,
Working with Branching & Merging, made changes in github using git commands through git bash,
Troubleshooted the issue: 
! [rejected] master -> master (fetch first)
error: failed to push some refs to 'git repo url'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
To change repository name > click on particular repository to be changed > goto settings > change the name > click rename
 
9/5/2018 
Done documentation on the following:
Git & Git Hub Introduction,
Installing Git on windows,
Creating a branch,
Merging a branch,
Deleting a branch,
Working with the scenario i.e., accessing files from a new branch in git repository other than using master branch from jenkins.

10/5/2018
Gone through the Git and GitHub Beginner Tutorial on how to send email from GitHub,
Done with the scenario successfully on how to trigger notification email from github whenever there is a change/commit in the project by:
Adding Email service to get notification to the particular email address and
Tested and validated the scenario by making some changes in the project to check whether notification is triggered or not,
Done with the documentation regarding the above mentioned scenario.

11/5/2018
Gone through the Git and GitHub Beginner Tutorial regarding creating users and managing roles,
Installed Role-based Authorization strategy plugin,
Created and Cofigured new users in jenkins dashboard,
Created and Assigned users to roles,
Plugin enables user authorization and roles can be defined globally or for particular jobs or nodes selected by regular expressions,
Controlled user access on projects by creating global role employee and project roles developer and tester.

14/5/2018
Gone through Git and GitHub Beginner Tutorial on git tags,
Got to know about: 
Branching versus tags,
Tags which allow you to refer to a specific commit in a repository,
Difference between tags and annotated tags,
Worked with the git tag commands to create tags and annotated tags also deleted tags,
Working with Display or show tags.

15/5/2018
Done documentation on branching versus tags, creation of tags, annotated tags and displaying tags.
Worked with show or display tags,
Pushed tags to remote repository,
Using git commands:
Deleted tags from local,
Deleted tags from remote,
Deleted multiple tags from local and remote.

16/5/2018
Done documentation on the following:
Viewing the created tags and pushing them to remote repository,
Deleting tags from local & remote repository,
Deleting multiple tags from local and remote,
Got to know about Checksum number, cryptographic hash number, SHA-1 algorithm,
Done with a scenario by creating a tag at a particular commit point inorder to take backup in the midst of several commits.
After creating the tag at the historic point, tags pushed to remote repo only can be seen in releases tab.

17/5/2018
Done documentation on the scenario creating a tag at a particular commit point inorder to take backup in the midst of several commits,
Created a tag for the past commit using checksum number and took a backup at a historic point,-
Done documentation for creating a tag on past commit,
Went through the tutorial on quick basic navigation and keyboard shortcuts for using GitBash and worked on it,
Solved the issue as I had a problem that is after exiting git log in windows git bash, text is disappeared on git bash and unable to access it properly.

18/5/2018
Done doc on using few keyboard shortcuts for using GitBash,
Pulled changes from Git repository on Git hub Cloud,
Parallely done doc on the scenario,
Goning through the git tutorials.

21/5/2018
Used a Git branch to merge a file by following the below steps:
Created a branch and checked it out,
Made a change in the new branch,
Committed the change to the new branch,
Integrated that change back into the main branch,
Deleted the branch you are no longer using.
Working with the documentation on the above scenario.

22/5/2018
Got to know about fast-forward merge,
Done documentation on Merging a branch into master branch using git bash by following steps:
Creating a new branch and make a change,
Merging the branch with master > “fast-forward merging”,
Push your change to GitHub,
Going through the tutorials Git & Git hub - forking concept.

23/5/2018
Done with the following scenario,
Forked an example repository "Spoon-Knife repository"
Synced the fork by
a. Setting up Git
b. Creating a local clone of the fork
c. Configuring Git to sync your fork with the original Spoon-Knife repository


24/5/2018
Done documentation on the following,
Forking an example repository "Spoon-Knife repository",
Syncing the fork by,
a. Setting up Git
b. Creating a local clone of the fork
c. Configuring Git to sync your fork with the original Spoon-Knife repository
Gone through the doc in GitHub.com on how to create a pull request from a fork,
Attended KT session on different types of backups and EMC Avamar.

25/5/2018
Done a scenario by creating a pull request from fork,
Working with the documentation on the above scenario,
Got to know how to delete and deleted the forked repo from your GitHub account,
Goning through the different types of backup operations:
Full backup
Incremental backup 
Differential backup

29/5/2018
Done with the documentation on
What exactly is a pull request,
Creating a pull request from fork and 
Opened a pull request
Got to know about git pull vs git and done doc on that

30/5/2018
Gone through the git stash tutorials,
Going through the following commands regarding their usage:
git stash
git list
git stash pop
git stash apply <stashname>

31/5/2018
Gone through the git fetch tutorials,
Working with the following commands:
git fetch
git merge
git pull
Got to know about the differences between git fetch, git merge and git pull,
Working with the documentation.


1/6/2018
Done with the documentation on the following concepts:
git pull,
git fetch,
git merge &
git pull vs git fetch
Going through the tutorials on git rebase.

4/6/2018
Done with the scenario - stashing changes from one branch to other with ease by following steps:
Created a new file on master branch,
Used command git stash to save file temporarily,
Later moved the file to the new branch,
Used git stash apply command and commit to save the changes from one branch to the other branch i.e., master to new branch.
# Once git stash apply command is used - file is viewed on the new branch and can't be seen on the master branch.

5/6/2018
Done documentation on the scenario - Stashing changes from one branch to other with ease or before checking out a different branch by 
a. Creating a new file on master branch,
b. Used git stash save "message" command to save file temporarily,
c. Moved file to the new branch by using git stash apply command,
d. And committed to save the changes from one branch to the other branch.
Solved the issue "error: you need to resolve your current index first the file: needs merge"

6/6/2018
Done the documentation on the following,
What is Stashing &
When to Stash your work
Done with a scenario by 
Stashing files using git stash command
Unstashed files by using git stash pop command on the same branch.


7/6/2018
Got to know about and worked with the following commands:
git stash pop
git stash drop
git stash drop <stash_id>
git stash clear
Working with git stash document in detail.

8/6/2018
Done with the documentation on the following:
Re-applying the stashed changes,
Stashing untracked or ignored files,
Managing multiple stashes,
Worked with scenario i.e., applying the same stashed changes to multiple branches,
Getting to know about the procedure on how to unapply the stash.

11/6/2018
Got to know about and working with the following commands:
git diff 
git diff --staged 
git diff HEAD 
git diff --color-words
git diff --word-diff
git diff --stat

[git diff (working directory differs from staging area)
git diff --staged (staging area & repository)
git diff HEAD (compares working tree and the most recent commit)
git diff id1 id2 (compare btwn two commit coz once committed only ids are generated)\
git diff --color-words
git diff --word-diff
git diff --stat

12/6/2018
Done with the documentation on:
How to get commit ID,
Diff between working directory and staging area,
Diff between staging area and last commit,
Diff between last commit and working directory,
Diff between 2 commits in the same branch,
How to find what files are changed.

13/6/2018
Got to about the following and done doc on:
What happens if you create a new branch?
How does Git know what branch you’re currently on?
How to find what commit is current HEAD?
What is detached HEAD?
Stashing untracked files using different options.

14/6/2018
Created a branch from another branch using git bash.
Worked with git branch commands with various options:
-a which shows all local and remote branches
-r which shows only remote branches
Figured out what branches are on remote by actually using the remote related commands:
git remote
git ls-remote

15/6/2018
Done documentation on the following:
Creation of a branch from the other branch,
On git branch commands with various options -a and -r,
On git remote and git ls-remote to figure out what branches are on remote,
On git diff with option 'color' for a single file and for multiple files.
Worked with the commands to configure vimdiff as default git difftool and
Turn off the prompt globally which prompts always asking to launch the vimdiff or not.

18/6/2018
Gone through git difftool tutorials
Worked with the following commands and done doc on them
vimdiff file1 file2
git difftool filename before and after staging 
git checkout filename
git diff commitid1 commitid2
git difftool HEAD HEAD^ filename 

19/6/2018
Worked with the following commands:
git diff HEAD which compares between the working tree and the HEAD - most recent commit,
git show commitid 
 eg: git show b9438 ( first 5 alphanumeric in commit id)
git revert commitid
 eg: git revert b9438 ( first 5 alphanumeric in commit id)
git clean -f used to remove untracked files,
git clean -xdf even removes all ignored files,
Got to know about shortcuts in git bash
Ctrl + Ins (to copy the content from the terminal)
Shift + Ins (to paste the content from the terminal)

25/6/2018
Done documentation on the following commands to know their usage:
git diff HEAD,
git show commitid,
git revert commitid,
git clean -f used to remove untracked files,
Went through the .gitignore tutorials,
Working with the .gitignore file,
Working with the command i.e., git clean -xdf which removes all the  ignored files.

26/6/2018
Got to know about git ignore patterns where .gitignore uses globbing patterns to match against file names,
Worked with and done documentation on,
Ignoring files using .gitignore file by creating a local .gitignore
1.	In Terminal, navigate to the location of your Git repository,
2.	Enter touch .gitignore to create a .gitignore file,
Ignored previously committed file,
Committed an ignored file.

27/6/2018
Worked with and got to know about git clean command and its options,
Done documentation on the following,
git clean -n
git clean -f
git clean -dn
git clean -df
Working with the git clean command to remove ignored files

28/6/2018
Done working with the git clean command to remove ignored files using the options -xf,
Also done document on the above scenario,
Worked with Interactive mode or git clean interactive mode using various commands in it such as,
1: clean
2: filter by pattern
3: select by numbers
4: ask each 
5: quit
6: help
Working with the commands filter by pattern and select by numbers.

29/6/2018
Done document on Interactive mode or git clean interactive mode using various commands in it such as,
1: clean
4: ask each 
5: quit
6: help
Working with the following scenarios for changing the commit message in two ways,
1. Commit has not been pushed online
2. Amending older or multiple commit messages

2/7/2018
Worked with the following scenarios and done with the documentation.
1. Procedures for amending the commit that has not been pushed online
(i)Changing a commit message that is rewriting the most recent commit message which is not pushed into github repository.
2. Procedures for amending older commit messages
(i) Amending the message of the most recently pushed commit.
(ii)Amending older commit message after a file is pushed into GitHub.

3/7/2018
Worked with the following interactive rebase commands 
pick which will keep the commit.
reword allows to edit the commit message.
edit will pause the rebase process so you can make more changes to the commit.
squash will condense the commit into the previous commit and let you edit the commit message.
fixup will condense the commit into the previous commit without editing the commit message.
drop will remove the commit or you can simply delete the line from the file.

5/7/2018
Done documentation on the following,
What is git rebase?
what is the usage of git rebase?
Use of the git interactive rebase command,
$ git rebase -i HEAD~3
Usage of the interactive rebase commands,
pick
reword
exit

6/7/2018
Done documentation on the following,
Normal Rebase vs Interactive Rebase,
squash which is a interactive rebase command,
drop also an interactive rebase command,
Git rebase interactive drop vs deleting the commit line,
Working with git rebase exec command.

9/7/2018
Got to know about the following and working with the documentation,
What is reset,
Three trees of git,
Different command line arguments such as:
- soft only changes HEAD, but doesn’t change staged files in index or working files,
- mixed moves HEAD and updates the index with the contents of the revision to which HEAD now points,
- hard moves HEAD and updates the index and working directory—this is the only version of reset that can cause data loss.

10/7/2018
Done documentation on the following,
What is reset and three trees of git,
What happens if the following commands are performed,
git reset HEAD
git reset HEAD~1
git reset HEAD~2
Working of reset,
Difference between git checkout and git reset

11/7/2018
Got to know about the following:
Scope of git reset modes,
All the options available for commit and reset,
Worked with the following examples:
Undo add,
Undo a commit,
Undo a merge or pull,
Reset a single file in the index.

12/7/2018
Done documentation on the git reset modes,
git reset --soft
git reset --mixed
git reset --hard
git reset --merge
How to reset a single file using command git reset -- filename

13/7/2018
Got to know the difference about HEAD vs ORIG_HEAD,
Done with the following examples:
Undo commits permanently,
Undo a commit and redo,
Undoing a merge or pull inside a dirty working tree,
Working with the scenario on how to deal with an interrupted workflow.

16/7/2018
Got to know about snapshot,
Done working with the scenario and also document on how to deal with an interrupted workflow,
Worked with the command $ git revert -n commit_id
Also got to know the difference between the commands,
$ git revert commit_id and $ git revert -n commit_id,
Gone through the tutorial on Undoing vs Reverting vs Resetting.

17/7/2018
Done documentation on the following,
Undoing the code changes for a single file,
Undoing the code changes for multiple files at a time,
Committing code changes directly using the command $ git revert commit_id,
Also committing code changes explicilty using the command with the option -n, $ git revert -n commit_id,
Resetting the code changes and moving to the previous commit history.

18/7/2018
Done document on the following,
Revert vs Reset,
Reset can be used in different scenarios,
Scenario-1: When you have made some changes and you no longer wanted them to be committed you just wanted to go back to the older clean state
Scenario-2: When you wanted to go to two commits back
Scenario-3: When you are doing git pull. It might result in merging errors. In this case you might just want to get rid of the mess, then you can simply use 
Scenario-4: You might have added a file to commit using  git add abc.c but later you realized you do not want to add then you can get it back
Going through the tutorials regarding git cherry-pick.

19/7/2018
Got to about the following,
What is Git cherry-pick,
Use cases of cherry-pick,
Cherry-picking becomes very useful and essential when it comes to bug fixing.
This could also be useful whenever a full branch merge is not possible due to incompatible versions in the various branches.
Also, you can use git cherry-pick to pull the changes introduced to a sub-branch, without changing the branch, by your colleague working on the same project.
Working with the documentation on the above.

20/7/2018
Worked with and done documentation on the following,
git cherry-pick <commit-id>
Viewing the Commit History with different options,
git log --stat
git log --pretty=oneline
git log --pretty=fuller
git log --pretty=format:"%h - %an, %ar : %s"
Also many other useful options for git log --pretty=format

about git log url > https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History(patch)
cherry pick abort continue > file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-cherry-pick.html
https://www.quora.com/What-is-the-difference-between-the-reset-and-revert-commands-in-the-Git-version-control-system
---------------
git gui
reset vs revert
git reset --keep
git rebase --abort,
git rebase --continue,
git rebase --skip,
git rebase --quit,
rebase exec
git cherry pick
patch
git tutorial
reflog
--------------

 


ref: file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-reset.html
ref1: https://stackoverflow.com/questions/2530060/can-you-explain-what-git-reset-does-in-plain-english


------------------------------------------------------------------------------------------------------------
tasks: 
https://help.github.com/enterprise/2.13/user/articles/changing-a-commit-message/
https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning
https://www.youtube.com/watch?v=FyAAIHHClqI
https://www.git-tower.com/learn/git/ebook/en/command-line/branching-merging/stashing > when to stash
https://git-scm.com/book/en/v1/Git-Tools-Stashing > stashing
https://git-scm.com/book/en/v2/Git-Branching-Rebasing > rebasing
https://orga.cat/posts/most-useful-git-commands > all git cmnds
https://www.youtube.com/watch?v=jza3xtBVjMc > git reset and git revert
https://www.youtube.com/watch?v=ErJyWO8TGoM > .gitignore
https://gettinggit.com/learn > all the concepts category wise

Ctrl + Ins (to copy the content from the terminal)
Shift + Ins (to paste the content from the terminal)
-----------------------------------------------------------------------------------------------------------------------

NOTES:
git clean -f will remove untracked files,meaning they're gone for good since they aren't stored in the repository.
Make sure you really want to remove all untracked files before doing this.
git reset --hard will not remove untracked files, 
where as git-clean will remove any files from the tracked root directory that are not under Git tracking.
git log --pretty-oneline
git log --pretty-oneline | grep NewB > will get all the commits of NewB branch

------------------------------------------------------------------------------------------------------------------------------------
scenarios:

diff btw reset n revert, chckout n reset, head n head~2(diagramatically)
need to work with "git exec rebase command "
exec,onto,nooff,todolist
rebase indepth > https://wilsonmar.github.io/git-rebase/
git reflog > https://www.atlassian.com/git/tutorials/rewriting-history
git reflog --relative-date
git bisect
git reset --soft
git reset --hard
git reset --mixed
patch
git reset --hard HEAD
How to create a branch from previous commit in git
Creating a Branch from a Stash
Creating a Branch from a Stash
diff tool
Going through the git diff tutorial.
git stash unapply - git stash show -p 
git diff
.gitignore
nxt scenario -> https://www.atlassian.com/git/tutorials/saving-changes/git-stash
git commit --amend > command to change the commit message if not pushed to remote repo
git reset HEAD s2 -> s2 - filename
git log -- s2
deletd s2 and restore it
about integration
https://www.atlassian.com/git/tutorials/using-branches/git-merge
git merge
how it works
preparing to merge
confirm the receiving branch
fetch latest remote commits --> git fetch
fast forward merge
3-way merge
resolving conflict
how conflicts are presented
rebase -----------------------------------------------------------------------------1 https://superuser.com/questions/751699/is-there-a-way-to-edit-a-commit-message-in-github/751909
rebase vs merging ------------------------------------------------------------------2
stash bfore rebase and merge -------------------------------------------------------3
changing a commit message -> https://help.github.com/enterprise/2.13/user/articles/changing-a-commit-message/
git log -3 --graph -> shows last three commits
git cherry pick
setting private and public repos in github
no need to give git credentials if it is a public repo
git clone https://github.com/doddam/myRepo.git - Clone a remote repository
git clone https://github.com/doddam/myRepo.git . - Clone a remote repository in the current directory
file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-reset.html


--------------------------------------------------------------------------------------------------------------------------

Summary & note:

Get a repo from somewhere:
clone

Create a repo from scratch:
init

Work in linear fashion on the current branch:
add
commit
mv
rm

Work with branches themselves:
branch
checkout
merge

For working in and with branches:
reset

Get information about things:
log
status
diff
show

For syncing your repo to and from others:
fetch
pull
push

For searching history:
grep

For marking objects, typically commits:
tag

For being cool (most versioners can't even do these):
bisect
rebase
-------------------------------------------------------------------------------------------------------------------

Jenkins:

Context Path (required): /jenkins
XML Configuration file URL:  (:C:/path/to/context.xml)->/data/Tomcat/conf/context.xml
WAR or Directory URL: -> path to context.xml  -> (/path/to/bar.war!/) ->  /home/dmanasa/Desktop/jenkins.
/jenkins
/data/Tomcat/conf
/home/dmanasa/Desktop
https://www.nagios.org/about/overview/ -> nagios working
http://docs.ansible.com/ansible/latest/playbooks_loops.html#standard-loops
Task -> create numb8/er of child branches and integrate to master branch
Task -> Configuring GitHub for Jenkins -> https://valuebound.com/resources/blog/continuous-integration-using-jenkins-and-github-to-automate-deployment
Task -> about git extensions -> https://media.readthedocs.org/pdf/git-extensions-documentation/latest/git-extensions-documentation.pdf
Task -> setup jenkins.war in tomcat and run it 
Task -> Deploying a war file from Jenkins to Tomcat(https://www.packtpub.com/mapt/book/virtualization_and_cloud/9781788471060/5/05lvl1sec34/deploying-a-war-file-from-jenkins-to-tomcat)
link -> http://www.baeldung.com/jenkins-job-schedule
task -> git hub witheclipse
https://wilsonmar.github.io/git-rebase/

Reference: https://www.tutorialspoint.com/jenkins/jenkins_git_setup.htm
https://www.cloudbees.com/blog/using-git-jenkins
In your Jenkins Dashboard (Home screen), click the Manage Jenkins option on the left hand side.
github branches in jenkins
--------------------------------------------------------------------------------------------------------------------

personal:
pb887766@gmail.com

tablets: 
may - 6th
june - 4th

------------------------------------------------------------------------------------------------------------------------

1417178000010632
ifsc - KVBL0001417
108.anilkumar@gmail.com

-------------------------------------------------------------------

116+k+s(rng)
108r+116+16rnds(rng)
111111111111111111111111111111111



--------------------------------------------------------------------

ppts on git:
-----------

https://www.quora.com/Where-can-I-learn-Git
https://www.slideshare.net/HubSpot/git-101-git-and-github-for-beginners

fatal: unable to access repository url SSL certificate problem: self signed certificate in certificate chain
error: Could not fetch origin


git config http.sslVerify false



10/4/2018
Downloaded jenkins on windows
Started jenkins using command prompt and done with the following command to extract the .war file (java -jar jenkins.war). 
Accessed jenkins through the link −> http://localhost:8080
Jenkins dashboard is opened by providing user name and password
Exploring jenkins dashboard/console
Changed the port from 8080 to 8088 using the command java -jar jenkins.war --httpPort=8088 and accessed jenkins through http://localhost:8088
Troubleshooting the issue regarding plugins as default plugins are not available in the dashboard.

11/4/2018
Working with the scenario: Compiling and running a java file in jenkins on Windows i.e., by integrating Jenkins and GitHub (with the GitHub Jenkins Plugin)
Exploring GitHub repository
Created an account in github -> https://github.com/ and created a new repository
Uploaded some files into repository by browsing the fil path and committed the changes.
Checked the files present in the particular repo whether they are committed or not.
Modified files which are already uploaded in the repo and again committed
Deleted files in the repository by selecting particular file to be deleted and again committed
I have pushed the code into the git repository and committed the changes required, debugging the plugins issue in jenkins and doing documentation parallely.

12/4/2018
Done with a scenario Git Plugin setup in Jenkins
Downloaded the latest Git.exe file for Windows and Installed 
Aaccessing git from windows command prompt without using Github server
Got to know about Git advantages
Working with git commands which are used to set a git repository

13/4/2018
Working with the scenario integrating jenkins and github i.e., Compiling and running a java file in jenkins on Windows
Successfully pushed the code into git repository
But unable to push code from git repository to the jenkins because of the following issue.
  Error occurred due to "SSL certificate problem: self signed certificate in certificate chain"
To check the issue, I have cloned files from the repository to local environment. But again faced the same issue.
Unable to access git, so troubleshooting the above issue.

16/4/2018
Done with the scenario:
Integrating jenkins and github via github plugin; i.e., Compiling and running a java application in jenkins on Windows
Created a job in jenkins
Configured the job with respective details:
 Gave Project details and GitHub url (as my repository is hosted from github)
 Selected Source Code Management (SCM) as Git and provided the respective url
 Next pushed the code; now coming to Build section, opted for add build step 
 Gave the commands required for compiling and running the application by selecting the option Execute Windows batch command.
 Saved and Build the job successfully; Now build history is seen by clicking #1 
 Output is viewed in console output section once job is build successfully.
 
17/4/2018
Doing research and development on pull request and merge request,
Attended KT session on NOC (Network Operations Center) and Nagios,
Done with the issue "SSL certificate problem: self signed certificate in certificate chain",
Tested Jenkins by picking up an appilcation from git repositroy to integrate,
Troubleshooting the issue: Class names, are only accepted if annotation processing is explicitly requested.

18/4/2018
Done with the issue "Class names, are only accepted if annotation processing is explicitly requested",
Tested the scenario again in Jenkins by picking up an appilcation from git repositroy to integrate - worked fine,
Done documnetation on the scenarios: Jenkins - Git Setup & Integrating Jenkins - GitHub
Attended KT session on disk alerts and application alerts
Getting to know about Network Operations Center, its design and managing NOC

19/4/2018
Got to know about 
Booting process in linux
Steps involved in the booting process
Commands to Monitor Swap Space Usage in Linux
Usage of nice and renice commands
Exploring the git gui 
Doing r&d on git on windows

20/4/2018
Attended a meeting on an effective communication,
Got to know about logrotate,
Doing r&d on git extension on windows,
Working with the scenario Jenkins Tomcat setup,
Troubleshooting the issue "FAIL - Application at context path [/jenkins] could not be started".
 
23/4/2018
Done with the issue "FAIL - Application at context path [/jenkins] could not be started",
Configured the following in tomcat web application manager to deploy jenkins.war file,
Context Path 	
XML Configuration file URL	
WAR or Directory URL
Successfully deployed jenkins.war in the tomcat,
Troubleshooting the issue "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists" while accessing the jenkins.

24/4/2018
I have been monitoring mails,
Started the jenkins application from tomcat, message is displayed as "OK - Started application at context path [/jenkins]",
Tried to access jenkins through http://localhost:8080/jenkins/ but facing the issue "HTTP Status 404 – Not Found",
Troubleshooting the above issue,
Meanwhile trying to deploy jenkins.war directly by uploading WAR file without configuring, but unable to do so because the connection to the server was reset while the page was loading.

25/4/2018
Checked the opened ports on the system by using netstat command and its options,
And changed the tomcat port as jenkins and tomcat are running on the same port; some port conflicts occurred,
Stopped the tomcat server
Opened Tomcat_Home/conf/server.xml file to edit 
Looked for the port *8080* in the xml file and replaced with the other available port.
<Connector port="8080" protocol="HTTP/1.1" 
connectionTimeout="20000" 
redirectPort="8443" />
Wrote playbook for deploying jenkins.war in the tomcat,
Successfully deployed jenkins.war in the tomcat,

26/4/2018
Working with the scenario jenkins tomcat setup,
Modifying the playbook jenkins.war,
Working with the ansible modules that enables the port 8080 such that jenkins would run on that port,
Troubleshooting the issues:
Encountered exception [javax.management.RuntimeOperationsException: Exception invoking method check],
403 Access Denied - You are not authorized to view this page
By default the Manager is only accessible from a browser running on the same machine as Tomcat. If you wish to modify this restriction, you'll need to edit the Manager's context.xml file. 

27/4/2018
Done with the scenario jenkins tomcat setup on windows,
Installed tomcat on windows,
Changed the default port of tomcat server in conf/tomcat-users.xml,
Downloaded jenkins.war,
Placed the jenkins.war file in webapps folder,
And successfully deployed jenkins.war application in tomcat web application manager,
Accessed the jenkins application from the tomcat,
Working with the documentation for the scenario jenkins-tomcat setup.

2/5/2018
Done with the documentation jenkins-tomcat setup,
Done with the scenario, jenkins picks up a java application from local system which is placed in the jenkins workplace an then a job is build,
Done document on the above scenario,
Attended KT session on 
LDAP servers,Active Directory,User creation in Physical box and VM.

3/5/2018
Went through the LDAP and AD also Git tutorial sessions,
Installed git on windows and accessed it from git bash,
After building the project (integrating Jenkins and Git) received the above error on the console output section,
" ERROR: Error cloning remote repo 'origin' "
Troubleshooted above issue by performing the below steps:
1. Go to Manage Jenkins  >  Global Tool Configurations 
2. Under Git configuration  >  Git installations 
3. Enter complete path to git executable including git.exe  > Save  > Again build the project
Done with the job jenkins and github integration and built it in other way through global tool configuration.

4/5/2018
Went through the jenkins beginner tutorial regarding:
Scheduling cron jobs in jenkins and 
About the build trigger configuration with options build periodically and Poll SCM ,
Done with a scenario Jenkins integration with GIT - SCM successfully,
Configured Poll SCM in build triggers by scheduling cron job,
Working with the documentation.

7/5/2018
Done with the documentation on the scenario - Jenkins integration with GIT - SCM,
Done with a scenario - scheduling a job in jenkins by using the option build periodically in build trigger section,
Scheduled job in jenkins by using cron compliant format,
Completed documentation regarding the scenario.

8/5/2018
Made some modifications in the documentation on the scenario - Jenkins integration with GIT - SCM,
Gone through Git and GitHub Beginner Tutorial on Branching and Merging concept,
Got to know about few commands those are required for Branching and Merging,
Working with Branching & Merging, made changes in github using git commands through git bash,
Troubleshooted the issue: 
! [rejected] master -> master (fetch first)
error: failed to push some refs to 'git repo url'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
To change repository name > click on particular repository to be changed > goto settings > change the name > click rename
 
9/5/2018 
Done documentation on the following:
Git & Git Hub Introduction,
Installing Git on windows,
Creating a branch,
Merging a branch,
Deleting a branch,
Working with the scenario i.e., accessing files from a new branch in git repository other than using master branch from jenkins.

10/5/2018
Gone through the Git and GitHub Beginner Tutorial on how to send email from GitHub,
Done with the scenario successfully on how to trigger notification email from github whenever there is a change/commit in the project by:
Adding Email service to get notification to the particular email address and
Tested and validated the scenario by making some changes in the project to check whether notification is triggered or not,
Done with the documentation regarding the above mentioned scenario.

11/5/2018
Gone through the Git and GitHub Beginner Tutorial regarding creating users and managing roles,
Installed Role-based Authorization strategy plugin,
Created and Cofigured new users in jenkins dashboard,
Created and Assigned users to roles,
Plugin enables user authorization and roles can be defined globally or for particular jobs or nodes selected by regular expressions,
Controlled user access on projects by creating global role employee and project roles developer and tester.

14/5/2018
Gone through Git and GitHub Beginner Tutorial on git tags,
Got to know about: 
Branching versus tags,
Tags which allow you to refer to a specific commit in a repository,
Difference between tags and annotated tags,
Worked with the git tag commands to create tags and annotated tags also deleted tags,
Working with Display or show tags.

15/5/2018
Done documentation on branching versus tags, creation of tags, annotated tags and displaying tags.
Worked with show or display tags,
Pushed tags to remote repository,
Using git commands:
Deleted tags from local,
Deleted tags from remote,
Deleted multiple tags from local and remote.

16/5/2018
Done documentation on the following:
Viewing the created tags and pushing them to remote repository,
Deleting tags from local & remote repository,
Deleting multiple tags from local and remote,
Got to know about Checksum number, cryptographic hash number, SHA-1 algorithm,
Done with a scenario by creating a tag at a particular commit point inorder to take backup in the midst of several commits.
After creating the tag at the historic point, tags pushed to remote repo only can be seen in releases tab.

17/5/2018
Done documentation on the scenario creating a tag at a particular commit point inorder to take backup in the midst of several commits,
Created a tag for the past commit using checksum number and took a backup at a historic point,-
Done documentation for creating a tag on past commit,
Went through the tutorial on quick basic navigation and keyboard shortcuts for using GitBash and worked on it,
Solved the issue as I had a problem that is after exiting git log in windows git bash, text is disappeared on git bash and unable to access it properly.

18/5/2018
Done doc on using few keyboard shortcuts for using GitBash,
Pulled changes from Git repository on Git hub Cloud,
Parallely done doc on the scenario,
Goning through the git tutorials.

21/5/2018
Used a Git branch to merge a file by following the below steps:
Created a branch and checked it out,
Made a change in the new branch,
Committed the change to the new branch,
Integrated that change back into the main branch,
Deleted the branch you are no longer using.
Working with the documentation on the above scenario.

22/5/2018
Got to know about fast-forward merge,
Done documentation on Merging a branch into master branch using git bash by following steps:
Creating a new branch and make a change,
Merging the branch with master > “fast-forward merging”,
Push your change to GitHub,
Going through the tutorials Git & Git hub - forking concept.

23/5/2018
Done with the following scenario,
Forked an example repository "Spoon-Knife repository"
Synced the fork by
a. Setting up Git
b. Creating a local clone of the fork
c. Configuring Git to sync your fork with the original Spoon-Knife repository


24/5/2018
Done documentation on the following,
Forking an example repository "Spoon-Knife repository",
Syncing the fork by,
a. Setting up Git
b. Creating a local clone of the fork
c. Configuring Git to sync your fork with the original Spoon-Knife repository
Gone through the doc in GitHub.com on how to create a pull request from a fork,
Attended KT session on different types of backups and EMC Avamar.

25/5/2018
Done a scenario by creating a pull request from fork,
Working with the documentation on the above scenario,
Got to know how to delete and deleted the forked repo from your GitHub account,
Goning through the different types of backup operations:
Full backup
Incremental backup 
Differential backup

29/5/2018
Done with the documentation on
What exactly is a pull request,
Creating a pull request from fork and 
Opened a pull request
Got to know about git pull vs git and done doc on that

30/5/2018
Gone through the git stash tutorials,
Going through the following commands regarding their usage:
git stash
git list
git stash pop
git stash apply <stashname>

31/5/2018
Gone through the git fetch tutorials,
Working with the following commands:
git fetch
git merge
git pull
Got to know about the differences between git fetch, git merge and git pull,
Working with the documentation.


1/6/2018
Done with the documentation on the following concepts:
git pull,
git fetch,
git merge &
git pull vs git fetch
Going through the tutorials on git rebase.

4/6/2018
Done with the scenario - stashing changes from one branch to other with ease by following steps:
Created a new file on master branch,
Used command git stash to save file temporarily,
Later moved the file to the new branch,
Used git stash apply command and commit to save the changes from one branch to the other branch i.e., master to new branch.
# Once git stash apply command is used - file is viewed on the new branch and can't be seen on the master branch.

5/6/2018
Done documentation on the scenario - Stashing changes from one branch to other with ease or before checking out a different branch by 
a. Creating a new file on master branch,
b. Used git stash save "message" command to save file temporarily,
c. Moved file to the new branch by using git stash apply command,
d. And committed to save the changes from one branch to the other branch.
Solved the issue "error: you need to resolve your current index first the file: needs merge"

6/6/2018
Done the documentation on the following,
What is Stashing &
When to Stash your work
Done with a scenario by 
Stashing files using git stash command
Unstashed files by using git stash pop command on the same branch.


7/6/2018
Got to know about and worked with the following commands:
git stash pop
git stash drop
git stash drop <stash_id>
git stash clear
Working with git stash document in detail.

8/6/2018
Done with the documentation on the following:
Re-applying the stashed changes,
Stashing untracked or ignored files,
Managing multiple stashes,
Worked with scenario i.e., applying the same stashed changes to multiple branches,
Getting to know about the procedure on how to unapply the stash.

11/6/2018
Got to know about and working with the following commands:
git diff 
git diff --staged 
git diff HEAD 
git diff --color-words
git diff --word-diff
git diff --stat

[git diff (working directory differs from staging area)
git diff --staged (staging area & repository)
git diff HEAD (compares working tree and the most recent commit)
git diff id1 id2 (compare btwn two commit coz once committed only ids are generated)\
git diff --color-words
git diff --word-diff
git diff --stat

12/6/2018
Done with the documentation on:
How to get commit ID,
Diff between working directory and staging area,
Diff between staging area and last commit,
Diff between last commit and working directory,
Diff between 2 commits in the same branch,
How to find what files are changed.

13/6/2018
Got to about the following and done doc on:
What happens if you create a new branch?
How does Git know what branch you’re currently on?
How to find what commit is current HEAD?
What is detached HEAD?
Stashing untracked files using different options.

14/6/2018
Created a branch from another branch using git bash.
Worked with git branch commands with various options:
-a which shows all local and remote branches
-r which shows only remote branches
Figured out what branches are on remote by actually using the remote related commands:
git remote
git ls-remote

15/6/2018
Done documentation on the following:
Creation of a branch from the other branch,
On git branch commands with various options -a and -r,
On git remote and git ls-remote to figure out what branches are on remote,
On git diff with option 'color' for a single file and for multiple files.
Worked with the commands to configure vimdiff as default git difftool and
Turn off the prompt globally which prompts always asking to launch the vimdiff or not.

18/6/2018
Gone through git difftool tutorials
Worked with the following commands and done doc on them
vimdiff file1 file2
git difftool filename before and after staging 
git checkout filename
git diff commitid1 commitid2
git difftool HEAD HEAD^ filename 

19/6/2018
Worked with the following commands:
git diff HEAD which compares between the working tree and the HEAD - most recent commit,
git show commitid 
 eg: git show b9438 ( first 5 alphanumeric in commit id)
git revert commitid
 eg: git revert b9438 ( first 5 alphanumeric in commit id)
git clean -f used to remove untracked files,
git clean -xdf even removes all ignored files,
Got to know about shortcuts in git bash
Ctrl + Ins (to copy the content from the terminal)
Shift + Ins (to paste the content from the terminal)

25/6/2018
Done documentation on the following commands to know their usage:
git diff HEAD,
git show commitid,
git revert commitid,
git clean -f used to remove untracked files,
Went through the .gitignore tutorials,
Working with the .gitignore file,
Working with the command i.e., git clean -xdf which removes all the  ignored files.

26/6/2018
Got to know about git ignore patterns where .gitignore uses globbing patterns to match against file names,
Worked with and done documentation on,
Ignoring files using .gitignore file by creating a local .gitignore
1.	In Terminal, navigate to the location of your Git repository,
2.	Enter touch .gitignore to create a .gitignore file,
Ignored previously committed file,
Committed an ignored file.

27/6/2018
Worked with and got to know about git clean command and its options,
Done documentation on the following,
git clean -n
git clean -f
git clean -dn
git clean -df
Working with the git clean command to remove ignored files

28/6/2018
Done working with the git clean command to remove ignored files using the options -xf,
Also done document on the above scenario,
Worked with Interactive mode or git clean interactive mode using various commands in it such as,
1: clean
2: filter by pattern
3: select by numbers
4: ask each 
5: quit
6: help
Working with the commands filter by pattern and select by numbers.

29/6/2018
Done document on Interactive mode or git clean interactive mode using various commands in it such as,
1: clean
4: ask each 
5: quit
6: help
Working with the following scenarios for changing the commit message in two ways,
1. Commit has not been pushed online
2. Amending older or multiple commit messages

2/7/2018
Worked with the following scenarios and done with the documentation.
1. Procedures for amending the commit that has not been pushed online
(i)Changing a commit message that is rewriting the most recent commit message which is not pushed into github repository.
2. Procedures for amending older commit messages
(i) Amending the message of the most recently pushed commit.
(ii)Amending older commit message after a file is pushed into GitHub.

3/7/2018
Worked with the following interactive rebase commands 
pick which will keep the commit.
reword allows to edit the commit message.
edit will pause the rebase process so you can make more changes to the commit.
squash will condense the commit into the previous commit and let you edit the commit message.
fixup will condense the commit into the previous commit without editing the commit message.
drop will remove the commit or you can simply delete the line from the file.

5/7/2018
Done documentation on the following,
What is git rebase?
what is the usage of git rebase?
Use of the git interactive rebase command,
$ git rebase -i HEAD~3
Usage of the interactive rebase commands,
pick
reword
exit

6/7/2018
Done documentation on the following,
Normal Rebase vs Interactive Rebase,
squash which is a interactive rebase command,
drop also an interactive rebase command,
Git rebase interactive drop vs deleting the commit line,
Working with git rebase exec command.

9/7/2018
Got to know about the following and working with the documentation,
What is reset,
Three trees of git,
Different command line arguments such as:
- soft only changes HEAD, but doesn’t change staged files in index or working files,
- mixed moves HEAD and updates the index with the contents of the revision to which HEAD now points,
- hard moves HEAD and updates the index and working directory—this is the only version of reset that can cause data loss.

10/7/2018
Done documentation on the following,
What is reset and three trees of git,
What happens if the following commands are performed,
git reset HEAD
git reset HEAD~1
git reset HEAD~2
Working of reset,
Difference between git checkout and git reset

11/7/2018
Got to know about the following:
Scope of git reset modes,
All the options available for commit and reset,
Worked with the following examples:
Undo add,
Undo a commit,
Undo a merge or pull,
Reset a single file in the index.

12/7/2018
Done documentation on the git reset modes,
git reset --soft
git reset --mixed
git reset --hard
git reset --merge
How to reset a single file using command git reset -- filename

13/7/2018
Got to know the difference about HEAD vs ORIG_HEAD,
Done with the following examples:
Undo commits permanently,
Undo a commit and redo,
Undoing a merge or pull inside a dirty working tree,
Working with the scenario on how to deal with an interrupted workflow.

16/7/2018
Got to know about snapshot,
Done working with the scenario and also document on how to deal with an interrupted workflow,
Worked with the command $ git revert -n commit_id
Also got to know the difference between the commands,
$ git revert commit_id and $ git revert -n commit_id,
Gone through the tutorial on Undoing vs Reverting vs Resetting.

17/7/2018
Done documentation on the following,
Undoing the code changes for a single file,
Undoing the code changes for multiple files at a time,
Committing code changes directly using the command $ git revert commit_id,
Also committing code changes explicilty using the command with the option -n, $ git revert -n commit_id,
Resetting the code changes and moving to the previous commit history.

18/7/2018
Done document on the following,
Revert vs Reset,
Reset can be used in different scenarios,
Scenario-1: When you have made some changes and you no longer wanted them to be committed you just wanted to go back to the older clean state
Scenario-2: When you wanted to go to two commits back
Scenario-3: When you are doing git pull. It might result in merging errors. In this case you might just want to get rid of the mess, then you can simply use 
Scenario-4: You might have added a file to commit using  git add abc.c but later you realized you do not want to add then you can get it back
Going through the tutorials regarding git cherry-pick.

19/7/2018
Got to about the following,
What is Git cherry-pick,
Use cases of cherry-pick,
Cherry-picking becomes very useful and essential when it comes to bug fixing.
This could also be useful whenever a full branch merge is not possible due to incompatible versions in the various branches.
Also, you can use git cherry-pick to pull the changes introduced to a sub-branch, without changing the branch, by your colleague working on the same project.
Working with the documentation on the above.

20/7/2018
Worked with and done documentation on the following,
git cherry-pick <commit-id>
Viewing the Commit History with different options,
git log --stat
git log --pretty=oneline
git log --pretty=fuller
git log --pretty=format:"%h - %an, %ar : %s"	
Also many other useful options for git log --pretty=format

23/7/2018
Got to know about the following,
Advantage of cherry-pick over merge
Why cherry-pick?
Why can't merge?
What are the commands used for re-writing history (commit --amend, rebase, cherry-pick, merge-squash)
Done some modifications in the presentation for the demo.

24/7/2018
Done documentataion on the following,
Advantage of cherry-pick over merge,
Why cherry-pick?
Why can't merge?
Ways of searching for text in branches using some options in git log command by,
- search string
- match regular expression
Finding branches that contain the commit.

25/7/2018
Worked and done doc with the following:
Advanced Git log option to display the first line of each commit message
Filtering the Commit History using the following
To search for commits that were created by amount
To search for commits that were created by date
To search for commits that were created between two dates
To search for commits that were created by relative references
To search for commits that were created by Author

26/7/2018
Worked and done doc with the following:
Filter commits by their commit message
To show the history related to a file
To search for commits that were created by content
Filtering commits by their range 
Viewing all commits of any branch from any other branch
Created an orphan branch and checking the commands to view the list.

27/7/2018
Got to know about and worked with the following:
What is a patch?
What is the use of patch?
In what scenario do we use patch?
How to create a patch?
View all the files in a patch directory.
How to apply a patch to another branch?
Also done documentation on the above.

31/7/2018
Worked with the some of advanced log commands for graphing and done doc on the following:
Visualizing the commit graph, showing information related to each commit.
To only show the commit id and comment per-commit.
To know the history by checking linear series of commits, and get sense of what was merged in where.
To know history of all the branches like commits and where are they merged.
Decorated the terminal to make easier display with different colors to check what branch is where.

1/8/2018
Worked with the some more advanced log commands for graphing and done doc on the following:
To show commits from oldest to newest
Showing the reference name on each line by adding - -source to the decorated terminal
To view abstract shape of the git repo
To view the significant points in commit history by eliminating all the intermediary commits
To view the whole history of the project inorder to re-introduce the Date info 
Getting to know about Docker

2/8/2018
Worked with reflog commands and done doc on the following,
Got to know about the reflog and why is it important
Reference logs that keeps track of updates to the tip of branches
To get a complete reflog of all references
Pass the branch name inorder to check the reflog for a specific branch
To view previously stashed some changes using the reflog stash command
The returned reference pointers can be passed to other commands

3/8/2018
Got to know about the following,
Why do we need containerization?
What is container?
Difference of conterization over virtualization
Advantages of container
What is docker on container?

6/8/2018
Gone through the docker tutorials
Got to know about the following:
What is Docker?
Why do we use Docker?
What is docker Architecture?
What are the Components present in the docker?

7/8/2018
Got to know the following things about docker
What are Docker Images?
How to pull/download docker images?
How to list available docker images?
How to know detailed information about a docker image?
How to get history of a docker images?
Gone through some tutorials regarding docker images.

8/8/2018
Installed docker toolbox on windows system,
Fixed an issue "Looks like something went wrong in step ´Looking for vboxmanage.exe´... Press any key to continue..." when I click on "Docker Quickstart Terminal",
Got to know following things about docker images,
How to Save or Backup a Docker Images?
How to Restore a Docker Images from a Backup?
How to remove or delete Docker Images?

9/8/2018
Fixed an issue in docker installation "Looks like something went wrong in step 'Checking if machine default exists'...Press any key to continue"
Got to know about what a docker file is?
And what a docker build is?
Troubleshooting the issue "ERROR: Get https://registry-1.docker.io/v2/: x509: certificate signed by unknown authority" and
Also going through the best practices for writing Docker files.

10/8/2018
Created a default docker machine and listed available machines
Used environment commands for the new VM
Connected shell to the new machine
Ran a container with docker run to verify set up of the machine.
Troubleshooting the issue "ERROR: Get https://registry-1.docker.io/v2/: x509: certificate signed by unknown authority".

13/8/2018
Gone through the tutorials and got to know the following things:
What is a Docker Registry?
Why do we use Docker Registries?
Architecture of docker that how a docker file is loaded to a Git Repo and then to jenkins server.
What is a Docker hub?
Working with a scenario to pull a sample image from docker hub.

14/8/2018
Got to about dynamic host configuration protocol server
Troubleshooting the following issues:
#1 VBoxManage.exe: error: Failed to attach the network LUN (VERR_INTNET_FLT_IF_NOT_FOUND) VBoxManage.exe: error: Details: code E_FAIL (0x80004005), component ConsoleWrap, interface IConsole
#2 Error checking TLS connection: ssh command error:
command : ip addr show
err     : exit status 255
output  :
Error checking TLS connection: ssh command error:
command : ip addr show
err     : exit status 255
#3 Error response from daemon: Get https://registry-1.docker.io/v2/: x509: certificate signed by unknown authority

15/8/2018
Troubleshooted the issues by performing following actions,
By regenerating the certificates
Restarted the docker host
Environment variables are set for the command window after restarting the machine
By reinstalling Docker toolbox and Oracle VM VirtualBox
By restarting the docker machine

16/8/2018
Got to know how does the format of a docker file exists?
What are the instructions present in docker file?
Where and what arguments needed to be passed for each instruction?
Got to know sample intructions like,
FROM instruction to start the Dockerfile specifying which image we derive our image from.
MAINTAINER instruction to specify oneself or one's organization as the maintainer of the image by placing one's email address there.
COPY will copy the files into the image.

17/8/2018
Solved the issue "error checking tls connection: error cchecking and/or regenerating the certs: There was an error validating certificates for host "192.168.99.100:2376": dial tcp 192.168.99.100:2376 i/o timeout"
Troubleshooting issue - error response from daemon certificate signed by unknown authority by,
Moving the bin path to last in PATH environment variable.
Changing the content in daemon.json file
Created a new docker machine node1 and regenerated the certificates 
Also tested by restarting new machine and by setting the environment variable.

20/8/2018
Got to know about yum-utils which is a collection of utilities as plugins extending yum in different ways,
What is EPEL and why do we use EPEL repository?
How to enable EPEL repository in CentOS being a root user.
Installed docker package on CentOS using the command # yum install docker
To install docker, the epel repositories must be enabled on the system by issuing # yum install epel-release
Troubleshooting the issue Cannot retrieve metalink for repository: epel/x86_64. Please verify its path and try again
(https://www.tecmint.com/install-docker-and-learn-containers-in-centos-rhel-7-6/)

NIS:
#1 Facing the issue in CentOS Error response from daemon: Get https://registry-1.docker.io/v2/: x509: certificate signed by unknown authority
#2 Cannot retrieve metalink for repository: epel/x86_64. Please verify its path and try again
#3 Facing the issue - One of the configured repositories failed (Unknown),
 and yum doesn't have enough cached data to continue. At this point the only safe thing yum can do is fail.
 
21/8/2018
Installed docker successfully on CentOS,
After installation, started the daemon, checked its status and enabled it using the docker commands,
Verified if Docker works properly by running a container test image and made sure it works by checking the ouptut,
Ran a few basic Docker commands to get some information about docker on the following,
For system-wide information on Docker # docker info
To know docker version # docker version
To get a list of all available Docker commands on the console # docker


22/8/2018
Searched the required image from docker hub and downloaded a docker image.
Pulled an ubuntu image from the docker hub and listed the available images on the host.
Allocated a unique name for every container by using the --name option on command line.
Manipulated containers (start, stop, remove, stats) by addressing its name which is allocated as before.
Got to know about the running containers ID by issuing # docker ps command.
Issued # docker stop command by specifying the container ID to stop the running container  -------- x ------ not as status
Fixed the issue "Docker error cannot delete docker container, conflict: unable to remove repository reference".

23/8/2018
Done documentation on the following concepts,
What is containerization and why do we need containerization 
Difference of containerization and Virtualization
Advantages of container
What is Docker and why do we use docker
What is docker on container

24/8/2018
Done documentation on the following,
What is docker architecture and docker components ?
What is a docker client and docker host/docker enginee ?
What is a docker registry ?
What are docker images and docker containers ?
What is a docker network (Bridge, Host, None)
Also we have other network drivers (Overlay, Mavlan)
What is a docker storage and how many types of storage are available (volumes, bind mounts, tmpfs mounts) 

27/8/2018
Done documentation on the following,
How to install docker package on CentOS 7 and CentOS 6
After docker package has been installed, done the following by using the docker commands 
Starting the daemon 
Checking its status
Enabling it system wide both on CentOS 6 and CentOS 7
Ran a container test image to verify if docker works properly by issuing docker command
How to know the system-wide information on docker, docker version and list of docker commands available on console.

28/8/2018
Going through the tutorials for integrating IBM Integration Bus on docker.
Done documentation on the following,
What is a snapshot image and docker image?
About images, containers, docker deamon, docker client, docker store
How to create or customize docker images?
How to get Docker Images and how to list available docker images?
How to pull / download docker images?

29/8/2018
Viewed detailed information about docker images using docker command # docker insepect <image-id>
Get to know the history of the docker images.
Took backup of an image by archiving it using the image id 
Listed the folder to confirm the docker Image ID is saved or not.
Removed a single image using image id, also deleted multiple images using docker commands
Restored the deleted image by loading the backup file of that particular image
Removed all docker images in a single command and done documentation work on the above.

30/8/2018
Worked with the following,
Pulled a docker image "ubuntu" from the doker hub.
Searched for the image that I need from the list of images by using grep command.
Created a docker container from the docker image which is an instance of the image.
Used the docker command to show only the running containers.
Used the docker command to show both the running and stopped containers.
Used the docker command to show most recently running container and done the documentation on the above.

31/8/2018
Added a tag name and repository name to the docker image.
Done documentation on docker file instructions and explained with examples:
FROM instruction used to specify the valid docker image name.
MAINTAINER instruction specifies about the author who creates the new docker image for the support.
COPY instruction copy files, directories and remote URL files to the destination within the filesystem of the Docker Images. 
RUN instruction used to execute any commands on top of the current image which will create a new layer
CMD instruction sets a command to be executed when running a container. 
WORKDIR instruction sets the working directory.
ENV instruction sets environment variables with key and value and etc.
The way how comments are mentioned in the docker file with an example.

10/9/2018
Got to know about the following things and their objectives,
What is release management and release management support ?
What are the responsibilities of release management ?
What is release planing and release build ?
What is release deployment, early life support and release closure?
What is a release or a release package and release record ?
What is a release unit and configiuration items ?

12/9/2018
Done the documentation on the following,
What is a dockerfile and why it is required ?
How to write a dockerfile by following the dockerfile instructions ?
Created a simple dockerfile for ngnix.
Explained some of the dockerfile commands used in the file.
Built the new image using the command # docker build <path> where path refers to the directory containing the Dockerfile.

13/9/2018
Working with the following scenario,
Created a dockerfile under the /root directory.
Defined the instructions to customize the existing docker image as per the requirement.
Built a docker image from the dockerfile from the instructions.
Ran and tested my customized docker image by launching a docker container

14/9/2018
Worked with and done documentation on the scenario to create a customized image and push into the docker hub,
Created a docker image and named it with a tag and a repository name
Pushed the image to the docker hub by providing the login credentials of docker hub in the terminal
Troubleshooted the issue "Error response from daemon: You cannot push a "root" repository. Please rename your repository to docker.io/<user>/<repo> "
Customized docker image is now available in the docker hub
I have logged in to the https://hub.docker.com/ and checked for my new image in the repository list.

17/9/2018
Done documentation on the following,
How to create a dockerfile under the /root directory.
How to define the instructions to customize the existing docker image.
How to build a docker image from the dockerfile using the instructions.
How to add a tag name and repository name to the image using the image reference id
How to run and test my customized docker image by launching a docker container.
Troubleshooting the issue# E: Unable to locate package nginx while building a dockerfile.

18/9/2018
Toubleshooted the issue#  Another application is holding yum lock .. by removing the file yum.pid in /var/run/
Troubleshooted the issue# E: Unable to locate package nginx while building a dockerfile.
Built a docker image (Apache webserver) successfully by,(DEVOPS GUY! - https://www.youtube.com/watch?v=EGWW7_eCeKA)
Creating a dockerfile using the given instructions.
Building the docker image from the dockerfile
Running the docker container and checked the status of the launched docker container.
Checked the web browser for the apache webserver.

19/9/2018
Done mapping of the ports for running the webserver in the browser.
Done documentation on the scenario building apache webserver image from the dockerfile
By creating dockerfile using the docker instructions to install apache webserver.
Explained docker instructions used in the dockerfile.
On how to build the docker image from the dockerfile using docker command.
How to run the docker container and how to check the status of the launched docker container.
How to check the web browser for the apache webserver.

20/9/2018
Worked with the dockerfiles to know the differences between CMD and ENTRYPOINT instructions.
Created two dockerfiles, one file with CMD instruction and the other with ENTRYPOINT instruction.
Images are built and also created tags using "docker build -t cmdchk:latest ." and "docker build -t epchk:latest ."
Tested the containers with newly created images.
Checked the logs of newly created containers to ensure the application script has run or not
Again ran the new containers by passing the argument "date" and once again tested the logs to check the differences.

21/9/2018
Done documentation on the following, (scenario to show the difference between docker CMD and ENTRYPOINT explained in detailed)
What is the usage of both the instructions CMD and ENTRYPOINT ? 
What are the declarations that can be made in CMD and ENTRYPOINT instructions in shell form and executable form ?
How to create the scripts using CMD instruction and ENTRYPOINT instuction to show the difference between them ?
How to built the scripts and how to create the tags and ran them to create the containers ?
To check the logs and also how to pass an argument to the instructions inorder to the know the complete difference between the instructions.

24/9/2018
Working with the scenario integrating IBM Integration Bus with the docker.(ref:https://github.com/ot4i/iib-docker)
Pulled the latest IIB image from the docker hub where the image contains a full runtime installation of IBM Integration Bus.
Ran the new container of the IBM Integration Bus (IIB) image by accepting the license and exposing the port.
Created a broker and a default integration server by running the IIB container.
Basing on the container name, searched for and got the ip address by using the docker inspect command.
Browsed using the IP address and the port number and the GUI of IBM Integration Bus is opened in the browser.

25/9/2018
Working with the scenario integrating docker and IBM Integration bus.
For working with the above mentioned scenario, done the following steps:
Created a message flow in IBM Integration Bus and generated a bar file in the toolkit.
Opened the WEB UI of IIB in the browser by typing the docker client IP address along with port number where docker is installed.
Deployed the bar file in the WEB UI of IBM Integration Bus.
Troubleshooting the issue "Deployment of the bar file of webservices message flow to default server has failed".



Start the ubuntu container using its id and the enter to it using docker exec -it id bash
(ref: https://www.youtube.com/watch?v=fdQ7MmQNTa0)

check or work with:
https://www.youtube.com/watch?v=wtImJTte-9E - ibm mq on docker
rename the repo name and tag name for an existing image
rmove tag name withut rmvng image
how to save multiple docker files in same dirctory
dockerfile to run and chk it in browser-https://www.learnitguide.net/2018/06/write-dockerfile-to-build-own-images.html

FROM instruction used to specify the valid docker image name.
MAINTAINER instruction specifies about the author who creates the new docker image for the support.
--LABEL instruction used to specify metadata informations to an image which is a key-value pair.
--EXPOSE instruction informs about the network ports that the container listens on runtime
COPY instruction copy files, directories and remote URL files to the destination within the filesystem of the Docker Images. 
RUN instruction used to execute any commands on top of the current image which will create a new layer
CMD instruction sets a command to be executed when running a container. 
--VOLUME instruction is used to create or mount a volume to the docker container from the docker host filesystem.
--USER instruction sets the username,group name, UID and GID for running subsequent commands. 
WORKDIR instruction sets the working directory.
ENV instruction sets environment variables with key and value.
--ONBUILD instruction specifies a command that runs when the image in the Dockerfile is used as a base image for another image.
How does the comments are mentioned in the docker file with an example



---------------------------------------------------
docker tasks:

git hooks
docker hooks
docker file
docker file best practices
iib on docker
mq on docker
docker file > git hub repo > jenkins
pull jenkins in docker
diff btw arg and env (ref: https://www.learnitguide.net/2018/06/dockerfile-explained-with-examples.html)
diff btw entry point and cmd(https://www.learnitguide.net/2018/06/dockerfile-explained-with-examples.html)
add instruction
docker tutorial -> build a sample image
MQ Performance in a Docker container > https://developer.ibm.com/messaging/2017/10/19/mq-performance-docker/
https://www.youtube.com/watch?v=YT3b8mJhp8o > docker instructions (cmd,entrypoint)

Reference: docker tutorial

------------------------------------------------------------
Docker links:
https://www.learnitguide.net/2018/02/what-is-container-what-is-docker.html > containers
https://www.learnitguide.net/2018/04/what-is-docker-get-started-from-basics.html > docker
https://docs.docker.com/machine/overview/ > docker machine

---------------------------------------------------------------------------------------------------------------
Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags and branches: 
git log --graph --oneline --decorate --all
See only which files have changed: 
git log --name-status
git log --graph
gist log --oneline --graph

log graphing: 
============

https://zwischenzugs.com/2016/06/04/power-git-log-graphing/  > 1/8
https://gist.github.com/datagrok/4221767 - git log graphing    ||
https://zwischenzugs.com/2016/06/04/power-git-log-graphing/    ||

https://stackoverflow.com/questions/35780773/how-to-get-git-log-name-status-to-work-with-merge-commits
https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs

---------------------------------------------------------------------------------------------------------------



about git log url > https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History(patch)
cherry pick abort continue > file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-cherry-pick.html
https://www.quora.com/What-is-the-difference-between-the-reset-and-revert-commands-in-the-Git-version-control-system
ref: file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-reset.html
ref1: https://stackoverflow.com/questions/2530060/can-you-explain-what-git-reset-does-in-plain-english

---------------
git gui
reset vs revert
git reset --keep
git rebase --abort,
git rebase --continue,
git rebase --skip,
git rebase --quit,
rebase exec
git cherry pick
patch
git tutorial
reflog
------------------------------------------------------------------------------------------------------------

tasks: 
https://help.github.com/enterprise/2.13/user/articles/changing-a-commit-message/
https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning
https://www.youtube.com/watch?v=FyAAIHHClqI
https://www.git-tower.com/learn/git/ebook/en/command-line/branching-merging/stashing > when to stash
https://git-scm.com/book/en/v1/Git-Tools-Stashing > stashing
https://git-scm.com/book/en/v2/Git-Branching-Rebasing > rebasing
https://orga.cat/posts/most-useful-git-commands > all git cmnds
https://www.youtube.com/watch?v=jza3xtBVjMc > git reset and git revert
https://www.youtube.com/watch?v=ErJyWO8TGoM > .gitignore
https://gettinggit.com/learn > all the concepts category wise
https://www.atlassian.com/git/tutorials > git tutorial
https://www.youtube.com/watch?v=xuB1Id2Wxak > git&github video
http://rogerdudler.github.io/git-guide/ > not indepth
file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-reset.html

Ctrl + Ins (to copy the content from the terminal)
Shift + Ins (to paste the content from the terminal)
-----------------------------------------------------------------------------------------------------------------------

NOTES:
git clean -f will remove untracked files,meaning they're gone for good since they aren't stored in the repository.
Make sure you really want to remove all untracked files before doing this.
git reset --hard will not remove untracked files, 
where as git-clean will remove any files from the tracked root directory that are not under Git tracking.
git log --pretty-oneline
git log --pretty-oneline | grep NewB > will get all the commits of NewB branch

------------------------------------------------------------------------------------------------------------------------------------
scenarios:

diff btw reset n revert, chckout n reset, head n head~2(diagramatically)
need to work with "git exec rebase command "
exec,onto,nooff,todolist
rebase indepth > https://wilsonmar.github.io/git-rebase/
git reflog > https://www.atlassian.com/git/tutorials/rewriting-history
git reflog --relative-date
git bisect
git reset --soft
git reset --hard
git reset --mixed
patch
git reset --hard HEAD
How to create a branch from previous commit in git
Creating a Branch from a Stash
Creating a Branch from a Stash
diff tool
Going through the git diff tutorial.
git stash unapply - git stash show -p 
git diff
.gitignore
nxt scenario -> https://www.atlassian.com/git/tutorials/saving-changes/git-stash
git commit --amend > command to change the commit message if not pushed to remote repo
git reset HEAD s2 -> s2 - filename
git log -- s2
deletd s2 and restore it
about integration
https://www.atlassian.com/git/tutorials/using-branches/git-merge
git merge
how it works
preparing to merge
confirm the receiving branch
fetch latest remote commits --> git fetch
fast forward merge
3-way merge
resolving conflict
how conflicts are presented
rebase -----------------------------------------------------------------------------1 https://superuser.com/questions/751699/is-there-a-way-to-edit-a-commit-message-in-github/751909
rebase vs merging ------------------------------------------------------------------2
stash bfore rebase and merge -------------------------------------------------------3
changing a commit message -> https://help.github.com/enterprise/2.13/user/articles/changing-a-commit-message/
git log -3 --graph -> shows last three commits
git cherry pick
setting private and public repos in github
no need to give git credentials if it is a public repo
git clone https://github.com/doddam/myRepo.git - Clone a remote repository
git clone https://github.com/doddam/myRepo.git . - Clone a remote repository in the current directory

--------------------------------------------------------------------------------------------------------------------------

Summary & note:

Get a repo from somewhere:
clone

Create a repo from scratch:
init

Work in linear fashion on the current branch:
add
commit
mv
rm

Work with branches themselves:
branch
checkout
merge

For working in and with branches:
reset

Get information about things:
log
status
diff
show

For syncing your repo to and from others:
fetch
pull
push

For searching history:
grep

For marking objects, typically commits:
tag

For being cool (most versioners can't even do these):
bisect
rebase



-------------------------------------------------------------------------------------------------------------------

Jenkins:

Context Path (required): /jenkins
XML Configuration file URL:  (:C:/path/to/context.xml)->/data/Tomcat/conf/context.xml
WAR or Directory URL: -> path to context.xml  -> (/path/to/bar.war!/) ->  /home/dmanasa/Desktop/jenkins.
/jenkins
/data/Tomcat/conf
/home/dmanasa/Desktop
https://www.nagios.org/about/overview/ -> nagios working
http://docs.ansible.com/ansible/latest/playbooks_loops.html#standard-loops
Task -> create numb8/er of child branches and integrate to master branch
Task -> Configuring GitHub for Jenkins -> https://valuebound.com/resources/blog/continuous-integration-using-jenkins-and-github-to-automate-deployment
Task -> about git extensions -> https://media.readthedocs.org/pdf/git-extensions-documentation/latest/git-extensions-documentation.pdf
Task -> setup jenkins.war in tomcat and run it 
Task -> Deploying a war file from Jenkins to Tomcat(https://www.packtpub.com/mapt/book/virtualization_and_cloud/9781788471060/5/05lvl1sec34/deploying-a-war-file-from-jenkins-to-tomcat)
link -> http://www.baeldung.com/jenkins-job-schedule
task -> git hub witheclipse
https://wilsonmar.github.io/git-rebase/

Reference: https://www.tutorialspoint.com/jenkins/jenkins_git_setup.htm
https://www.cloudbees.com/blog/using-git-jenkins
In your Jenkins Dashboard (Home screen), click the Manage Jenkins option on the left hand side.
github branches in jenkins
111111111111111111111111111111111

--------------------------------------------------------------------------------------------------------------------


personal:
--------
pb887766@gmail.com

tablets: 
may - 6th
june - 4th

1417178000010632
ifsc - KVBL0001417
108.anilkumar@gmail.com

116+k+s(rng)
108r+116+16rnds(rng)


--------------------------------------------------------------------

ppts on git:
-----------

https://www.quora.com/Where-can-I-learn-Git
https://www.slideshare.net/HubSpot/git-101-git-and-github-for-beginners

fatal: unable to access repository url SSL certificate problem: self signed certificate in certificate chain
error: Could not fetch origin


git config http.sslVerify false
abcd@1234Z


release management
web server - apache 
appl ser - was,jboss,apache tomcat


wifi pwd
uname-domain name
pwd-Miracle@1

